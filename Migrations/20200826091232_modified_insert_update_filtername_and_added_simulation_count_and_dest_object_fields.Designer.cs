// <auto-generated />
using System;
using Dedup.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Dedup.Migrations
{
    [DbContext(typeof(DeDupContext))]
    [Migration("20200826091232_modified_insert_update_filtername_and_added_simulation_count_and_dest_object_fields")]
    partial class modified_insert_update_filtername_and_added_simulation_count_and_dest_object_fields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dedup")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Dedup.Models.AuthTokens", b =>
                {
                    b.Property<string>("auth_id")
                        .HasColumnType("text");

                    b.Property<string>("access_token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("expires_in")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("redirect_url")
                        .HasColumnType("text");

                    b.Property<string>("refresh_token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("session_nonce")
                        .HasColumnType("text");

                    b.Property<string>("token_type")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("auth_id");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("Dedup.Models.Connectors", b =>
                {
                    b.Property<int>("connector_id")
                        .HasColumnType("integer");

                    b.Property<string>("ccid")
                        .HasColumnType("text");

                    b.Property<int>("backup_before_delete")
                        .HasColumnType("integer");

                    b.Property<string>("compare_config_json")
                        .HasColumnType("text");

                    b.Property<string>("compare_object_fields")
                        .HasColumnType("text");

                    b.Property<string>("connector_name")
                        .HasColumnType("text");

                    b.Property<int>("connector_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("custom_schedule_in_minutes")
                        .HasColumnType("integer");

                    b.Property<int>("dedup_method")
                        .HasColumnType("integer");

                    b.Property<int>("dedup_source_type")
                        .HasColumnType("integer");

                    b.Property<int>("dedup_type")
                        .HasColumnType("integer");

                    b.Property<int?>("deduped_count")
                        .HasColumnType("integer");

                    b.Property<string>("dest_config_json")
                        .HasColumnType("text");

                    b.Property<string>("dest_object_fields")
                        .HasColumnType("text");

                    b.Property<string>("dest_object_name")
                        .HasColumnType("text");

                    b.Property<string>("dest_schema")
                        .HasColumnType("text");

                    b.Property<string>("job_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("last_sync_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("last_sync_status")
                        .HasColumnType("integer");

                    b.Property<int>("review_before_delete")
                        .HasColumnType("integer");

                    b.Property<int>("schedule_type")
                        .HasColumnType("integer");

                    b.Property<int>("simulation_count")
                        .HasColumnType("integer");

                    b.Property<string>("src_config_json")
                        .HasColumnType("text");

                    b.Property<string>("src_new_record_filter")
                        .HasColumnType("text");

                    b.Property<string>("src_object_name")
                        .HasColumnType("text");

                    b.Property<string>("src_schema")
                        .HasColumnType("text");

                    b.Property<string>("src_update_record_filter")
                        .HasColumnType("text");

                    b.Property<int?>("sync_count")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("sync_ended_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("sync_log_json")
                        .HasColumnType("text");

                    b.Property<int>("sync_src")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("sync_started_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("sync_status")
                        .HasColumnType("integer");

                    b.Property<int?>("sync_updated_count")
                        .HasColumnType("integer");

                    b.Property<int?>("total_records_count")
                        .HasColumnType("integer");

                    b.Property<int>("two_way_sync_priority")
                        .HasColumnType("integer");

                    b.Property<int?>("unique_records_count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("connector_id", "ccid");

                    b.HasIndex("ccid");

                    b.HasIndex("connector_id", "ccid")
                        .IsUnique();

                    b.ToTable("Connectors");
                });

            modelBuilder.Entity("Dedup.Models.DeDupSettings", b =>
                {
                    b.Property<string>("ccid")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("database_config_json")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ccid");

                    b.ToTable("DeDupSettings");
                });

            modelBuilder.Entity("Dedup.Models.PartnerAuthTokens", b =>
                {
                    b.Property<string>("auth_id")
                        .HasColumnType("text");

                    b.Property<string>("access_token")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("expires_in")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("oauth_code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("oauth_expired_in")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("oauth_type")
                        .HasColumnType("integer");

                    b.Property<string>("redirect_url")
                        .HasColumnType("text");

                    b.Property<string>("refresh_token")
                        .HasColumnType("text");

                    b.Property<string>("session_nonce")
                        .HasColumnType("text");

                    b.Property<string>("token_type")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("auth_id");

                    b.ToTable("PartnerAuthTokens");
                });

            modelBuilder.Entity("Dedup.Models.Resources", b =>
                {
                    b.Property<string>("uuid")
                        .HasColumnType("text");

                    b.Property<string>("app_name")
                        .HasColumnType("text");

                    b.Property<string>("callback_url")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("expired_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("heroku_id")
                        .HasColumnType("text");

                    b.Property<bool?>("is_license_accepted")
                        .HasColumnType("boolean");

                    b.Property<string>("plan")
                        .HasColumnType("text");

                    b.Property<string>("private_app_url")
                        .HasColumnType("text");

                    b.Property<string>("region")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("user_email")
                        .HasColumnType("text");

                    b.Property<string>("user_name")
                        .HasColumnType("text");

                    b.Property<string>("user_organization")
                        .HasColumnType("text");

                    b.HasKey("uuid");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Dedup.Models.AuthTokens", b =>
                {
                    b.HasOne("Dedup.Models.Resources", "Resource")
                        .WithOne("AuthToken")
                        .HasForeignKey("Dedup.Models.AuthTokens", "auth_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dedup.Models.Connectors", b =>
                {
                    b.HasOne("Dedup.Models.DeDupSettings", "DeDupSetting")
                        .WithMany("Connectors")
                        .HasForeignKey("ccid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dedup.Models.DeDupSettings", b =>
                {
                    b.HasOne("Dedup.Models.Resources", "Resource")
                        .WithOne("DedupSetting")
                        .HasForeignKey("Dedup.Models.DeDupSettings", "ccid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dedup.Models.PartnerAuthTokens", b =>
                {
                    b.HasOne("Dedup.Models.Resources", "Resource")
                        .WithOne("partnerAuthToken")
                        .HasForeignKey("Dedup.Models.PartnerAuthTokens", "auth_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

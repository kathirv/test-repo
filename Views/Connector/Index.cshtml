@using System.Linq
@using Newtonsoft.Json
@using Dedup.ViewModels
@using Dedup.Extensions
@using Dedup.Common
@model ConnectorConfig

@{
    if (Model != null && Model.connectorId.HasValue == false)
    {
        ViewData["Title"] = "Add DeDup Process";
    }
    else
    {
        ViewData["Title"] = "Edit DeDup Process";
    }

    bool isPlanInfoAvail = false;
    PlanInfos currentPlanFeatures = default(PlanInfos);
    if (ViewBag.CurrentPlan.IsInitialized)
    {
        currentPlanFeatures = (PlanInfos)ViewBag.CurrentPlan;
        isPlanInfoAvail = true;
    }

    Func<ConnectorType, bool>
    disableConnectorType = (cType) =>
    {
        bool disabled = false;
        if (isPlanInfoAvail)
        {
            if (Model != null && Model.connectorId.HasValue && Model.syncDestination == cType)
            {
                disabled = false;
            }
            else
            {
                switch (cType)
                {
                    case ConnectorType.Heroku_Postgres:
                    case ConnectorType.Azure_Postgres:
                    case ConnectorType.AWS_Postgres:
                        disabled = (currentPlanFeatures.is_postgresql ? false : true);
                        if (!disabled && currentPlanFeatures.addedDedupProcessCount != -1)
                        {
                            disabled = (currentPlanFeatures.addedDedupProcessCount <= currentPlanFeatures.max_dedup_process_allowed ? false : true);
                        }
                        break;
                    case ConnectorType.Azure_SQL:
                        disabled = (currentPlanFeatures.is_mssql ? false : true);
                        if (!disabled && currentPlanFeatures.addedDedupProcessCount != -1)
                        {
                            disabled = (currentPlanFeatures.addedDedupProcessCount <= currentPlanFeatures.max_dedup_process_allowed ? false : true);
                        }
                        break;
                    default:
                        disabled = true;
                        break;
                }
            }
        }
        return disabled;
    };

    var isPostgresConnectorEnable = false;
    var isSqlConnectorEnable = false;
    var isScheduleTypeEnable = false;
    var isDedupTypeEnable = true;
    var isSourceType = true;
    var isTableType = true;
    var isNotNewProcess = true;
    if (isPlanInfoAvail)
    {
        isScheduleTypeEnable = currentPlanFeatures.schedule_dedup_process;
    }
    if (Model != null)
    {
        if (Model.connectorId.HasValue == false)
        {
            isNotNewProcess = false;
            isDedupTypeEnable = false;
            isSourceType = false;
            isTableType = false;
            isPostgresConnectorEnable = disableConnectorType(ConnectorType.Heroku_Postgres);
            isSqlConnectorEnable = disableConnectorType(ConnectorType.Azure_SQL);
        }
    }
}

@section styles{

    <style type="text/css">


        .ui-tooltip {
            background-color: #e1e1ef;
            white-space: pre-wrap;
            max-width: 500px;
            /*color: white;*/
        }

        .form-group.has-error label[for], .form-group.has-error span[for] {
            color: #dd4b39;
        }

        [data-tip] {
            position: relative;
        }

            [data-tip]:before {
                content: '';
                /* hides the tooltip when not hovered */
                display: none;
                content: '';
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-bottom: 5px solid #1a1a1a;
                position: absolute;
                top: 30px;
                left: 35px;
                z-index: 8;
                font-size: 0;
                line-height: 0;
                width: 0;
                height: 0;
            }


            [data-tip]:after {
                display: none;
                content: attr(data-tip);
                position: absolute;
                top: 35px;
                left: 0px;
                padding: 5px 8px;
                background: #1a1a1a;
                color: white;
                z-index: 9;
                font-size: 0.75em;
                height: 18px;
                line-height: 18px;
                -webkit-border-radius: 3px;
                -moz-border-radius: 3px;
                border-radius: 3px;
                white-space: nowrap;
                word-wrap: normal;
            }

            [data-tip]:hover:before,
            [data-tip]:hover:after {
                display: block;
            }


        .Dedup_Process_Type_Tip {
            margin-left: 30px;
            color: black;
            font-style: italic;
            display: block;
        }
    </style>

}

@using (Html.BeginForm())
{
    @if (Model != null)
    {
        <input type="hidden" name="htnSyncStatus" value="@Model.syncStatus" />
        <input type="hidden" name="ETuuid" value="@Model.ccid" />
        <input type="hidden" name="ETName" value="@Model.sourceObjectName" />
        <input type="hidden" name="destObjName" value="@Model.destObjectName" />
        <input type="hidden" name="isScheduleAllow" value="@isScheduleTypeEnable.ToString()" />
        if (Model.sourceObjectFields != null)
        {
            <input type="hidden" name="ETFields" value="@string.Join(",", Model.sourceObjectFields)" />
        }
        if (Model.dbConfig_compare != null && Model.dbConfig_compare.compareObjectFields != null && Model.dedupSourceType == @SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B)
        {
            <input type="hidden" name="CSFields" value="@string.Join(",", Model.dbConfig_compare.compareObjectFields)" />
        }
    }
    else
    {
        <input type="hidden" name="htnSyncStatus" value="" />
        <input type="hidden" name="ETuuid" value="" />
        <input type="hidden" name="ETName" value="" />
        <input type="hidden" name="destObjName" value="" />
        <input type="hidden" name="ETFields" value="" />
    }
    <input type="hidden" name="gbl_dbschema" value="@Constants.POSTGRES_DEFAULT_SCHEMA" />
    <input type="hidden" name="gbl_sqldbschema" value="@Constants.MSSQL_DEFAULT_SCHEMA" />
    <!-- The Modal Popup -->
    <div id="div-disable-plan-limit" style="z-index: 1;top: 50%;left: 10%;position: absolute;margin: 0;padding: 0;font-size: 1.2rem;font-weight: 500;color:rgb(234, 56, 13);display:none;">Plan limit reached for number of Processes that can be created. Please upgrade to higher plan or delete some process to create a new process</div>
    <div id="div_form-opacity" style="opacity: 0;">
        <div id="divColumnSelect" class="modal fade show" role="dialog" aria-modal="true" style="display:none; padding-right:17px;">
            <!-- Modal content -->
            <div class="modal-dialog modal-xl">
                <div class="modal-content" style="min-height:300px;">
                    <div class="modal-header">
                        <h2 class="modal-title" style="margin-left: auto;">Select Matching Column</h2>
                        <input type="button" class="close" data-dismiss="modal" id="popupClose" style="padding:0px" aria-label="Close" value="x" />
                    </div>
                    <div class="modal-body">
                    </div>
                    <div class="modal-footer">
                        <input type="button" class="btn btn-primary" style="margin: auto;" id="btnColumnSelect" name="btnColumnSelect" value="Confirm" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-10" id="divSourceTypes">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first" style="margin:0px !important">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="dedupSourceType">@HeadingsAndMessage.DEDUP_PROCESS_TYPE</label>
                                    <div class="kt-radio-inline">
                                        @foreach (SourceType sourceType in Enum.GetValues(typeof(SourceType)))
                                        {
                                            @if (Model.dedupSourceType == sourceType && isSourceType)
                                            {
                                                @if (Model.dedupSourceType.ToString() == SourceType.Remove_Duplicates_from_a_Single_Table.ToString())
                                                {
                                                    <label class="kt-radio  @(isSourceType == false ?" ":" kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="dedupSourceType" value="@sourceType" @(isSourceType == false ? "" : "disabled='disabled'") data-val="true" checked="checked" data-val-required="Please select a DeDup Process type" />@sourceType.GetSourceTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_SINGLE_PROCESSS_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label><br /><span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_PROCESS_TYPE_SingleTable</span><br />
                                                }
                                                else if (Model.dedupSourceType.ToString() == SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B.ToString())
                                                {
                                                    <label class="kt-radio  @(isSourceType == false ?" ":" kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="dedupSourceType" value="@sourceType" data-val="true" @(isSourceType == false ? "" : "disabled='disabled'") data-tip="tooltip" checked="checked" data-val-required="Please select a DeDup Process type" />@sourceType.GetSourceTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_MULTIPLE_PROCESS_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label><br /><span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_PROCESS_TYPE_Merge_Table_A_Data_to_Table_B</span><br />
                                                }
                                                else if (Model.dedupSourceType.ToString() == SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination.ToString())
                                                {
                                                    <label class="kt-radio  @(isSourceType == false ?" ":" kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="dedupSourceType" value="@sourceType" data-val="true" @(isSourceType == false ? "" : "disabled='disabled'") data-tip="tooltip" checked="checked" data-val-required="Please select a DeDup Process type" />@sourceType.GetSourceTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_MULTIPLE_PROCESS_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label><br /><span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_PROCESS_TYPE_Copy_Source_data_to_Destination</span><br />
                                                }
                                            }
                                            else
                                            {
                                                @if (sourceType.ToString() == SourceType.Remove_Duplicates_from_a_Single_Table.ToString())
                                                {
                                                    <label class="kt-radio  @(isSourceType == false ? " ":" kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="dedupSourceType" value="@sourceType" @(isSourceType == false ? "" : "disabled='disabled'") data-val="true" data-val-required="Please select a DeDup Process type" />@sourceType.GetSourceTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_SINGLE_PROCESSS_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label><br /><span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_PROCESS_TYPE_SingleTable</span><br />
                                                }
                                                else if (sourceType.ToString() == SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B.ToString())
                                                {
                                                    <label class="kt-radio  @(isSourceType == false ? " ": " kt-radio--disabled") " style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="dedupSourceType" value="@sourceType" data-val="true" @(isSourceType == false ? "" : "disabled='disabled'") data-tip="tooltip" data-val-required="Please select a DeDup Process type" />@sourceType.GetSourceTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_MULTIPLE_PROCESS_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label><br /><span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_PROCESS_TYPE_Merge_Table_A_Data_to_Table_B</span><br />
                                                }
                                                else if (sourceType.ToString() == SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination.ToString())
                                                {
                                                    <label class="kt-radio  @(isSourceType == false ? " ": " kt-radio--disabled") " style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="dedupSourceType" value="@sourceType" data-val="true" @(isSourceType == false ? "" : "disabled='disabled'") data-tip="tooltip" data-val-required="Please select a DeDup Process type" />@sourceType.GetSourceTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_MULTIPLE_PROCESS_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label><br /><span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_PROCESS_TYPE_Copy_Source_data_to_Destination</span><br />
                                                }
                                            }
                                        }
                                    </div>
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.dedupSourceType)
                                    </p>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-10" id="divMethodTypes">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first" style="margin:0px !important">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="dedup_type">@HeadingsAndMessage.DEDUP_SIMILARITY_FINIDING_METHOD</label>
                                    <div id="dedupType-class" class="kt-radio-inline">
                                        @foreach (SimilarityType methodType in Enum.GetValues(typeof(SimilarityType)))
                                        {
                                            @if (Model.dedup_method == methodType && isNotNewProcess)
                                            {
                                                @if (Model.dedup_method.ToString() == SimilarityType.Logical_AND.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@methodType">
                                                        <input type="radio" name="methodType" value="@methodType" data-val="true" data-val-required="Please select a Similarity type" @(isNotNewProcess == false ? "" : "disabled='disabled'") checked="checked" /> @methodType.GetSimilarityTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.dedup_method.ToString() == SimilarityType.Logical_OR.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@methodType">
                                                        <input type="radio" name="methodType" value="@methodType" data-tip="tooltip" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") data-val-required="Please select a Similarity type" checked="checked" />@methodType.GetSimilarityTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.dedup_method.ToString() == SimilarityType.Fuzzy_Compare.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@methodType">
                                                        <input type="radio" name="methodType" value="@methodType" data-tip="tooltip" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") data-val-required="Please select a Similarity type" checked="checked" />@methodType.GetSimilarityTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                    <div style="margin-top:-30px;padding-left: 42%;" id="fuzzy_comparebox">
                                                        @Html.TextBoxFor(model => model.fuzzy_ratio, new { @class = "form-control col-lg-2", @placeholder = "Please enter the fuzzy ratio", @readonly = "readonly" })
                                                    </div>
                                                    @*<div class="row" style="margin-top:20px;margin-left:26%;color:red!important">
                                                        <div class="col-md-9 margin-bottom">
                                                            <span id="fuzzyratio_errormsg"></span>
                                                        </div>
                                                    </div>*@
                                                }
                                            }
                                            else
                                            {
                                                @if (Model.dedup_method.ToString() == SimilarityType.Logical_AND.ToString())
                                                {
                                                    @if (methodType.GetSimilarityTypeDescription() != "Fuzzy Compare")
                                                    {
                                                        <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@methodType">
                                                            <input type="radio" name="methodType" value="@methodType" data-val="true" data-val-required="Please select a Similarity type" @(isNotNewProcess == false ? "" : "disabled='disabled'") /> @methodType.GetSimilarityTypeDescription()
                                                            @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                            <span></span>
                                                        </label>
                                                    }
                                                    @*@if (methodType.GetSimilarityTypeDescription() == "Fuzzy Compare")
                                                    {
                                                        <div style="margin-top:-30px;padding-left: 42%;display:none" id="fuzzy_comparebox">
                                                            @Html.TextBoxFor(model => model.fuzzy_ratio, new { @class = "form-control col-lg-2", @placeholder = "Please enter the fuzzy ratio" })
                                                        </div>
                                                        <div class="row" style="margin-top:20px;margin-left:26%;color:red!important">
                                                            <div class="col-md-9 margin-bottom">
                                                                <span id="fuzzyratio_errormsg"></span>
                                                            </div>
                                                        </div>
                                                    }*@
                                                }
                                                else if (Model.dedup_method.ToString() == SimilarityType.Logical_OR.ToString())
                                                {
												 @if (methodType.GetSimilarityTypeDescription() != "Fuzzy Compare")
                                                    {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@methodType">
                                                        <input type="radio" name="methodType" value="@methodType" data-tip="tooltip" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") data-val-required="Please select a Similarity type" />@methodType.GetSimilarityTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
												}
                                                else if (Model.dedup_method.ToString() == SimilarityType.Fuzzy_Compare.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@methodType">
                                                        <input type="radio" name="methodType" value="@methodType" data-tip="tooltip" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") data-val-required="Please select a Similarity type" />@methodType.GetSimilarityTypeDescription()
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                        }

                                        @*<div style="margin-top:-30px;padding-left: 42%;display:block" id="fuzzy_comparebox">
                                            @Html.TextBoxFor(model => model.fuzzy_ratio, new { @class = "form-control col-lg-2", @placeholder = "Please enter the fuzzy ratio" })
                                        </div>*@
                                        <div style="float: right;padding-right: 55%;" id="fuzzy_comparebox">
                                            <label style="text-transform:capitalize;color:#333 !important">Similarity Threshold</label>
                                            @Html.TextBoxFor(model => model.fuzzy_ratio, new { @class = "form-control col-lg-4", @placeholder = "", @style = "margin-top:-30px;margin-left:76%" })
                                            <div style="float:right;margin-top:-30px;margin-right:-30px;"><label>%</label></div>
                                        </div>
                                        <div class="row" style="margin-top:20px;margin-left:26%;color:red!important">
                                            <div class="col-md-9 margin-bottom">
                                                <span id="fuzzyratio_errormsg"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_SIMILARITY_FINDING_METHOD_TEXT</span><br />
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.dedup_method)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-10" id="divReviewBeforeDelete">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first" style="margin:0px !important">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="dedup_type">@HeadingsAndMessage.DEDUP_YOU_WANT_TO_REVIEW_BEFORE_DELETING_DUPLICATE</label>
                                    <div id="dedupType-class" class="kt-radio-inline">
                                        @foreach (ReviewBeforeDeleteDups reviewBefore in Enum.GetValues(typeof(ReviewBeforeDeleteDups)))
                                        {
                                            @if (Model.review_before_delete == reviewBefore && isNotNewProcess)
                                            {
                                                @if (Model.review_before_delete.ToString() == ReviewBeforeDeleteDups.Yes.ToString())
                                                {
                                                    <label class="kt-radio" style="text-transform:capitalize;color: #333 !important;" id="@reviewBefore">
                                                        <input type="radio" name="reviewBefore" value="@reviewBefore" data-val="true" data-val-required="Please select a Review type" checked="checked" /> @reviewBefore.GetReviewBeforeDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.review_before_delete.ToString() == ReviewBeforeDeleteDups.No.ToString())
                                                {
                                                    <label class="kt-radio" style="text-transform:capitalize;color: #333 !important;" id="@reviewBefore">
                                                        <input type="radio" name="reviewBefore" value="@reviewBefore" data-tip="tooltip" data-val="true" data-val-required="Please select a Review type" checked="checked" />@reviewBefore.GetReviewBeforeDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                            else
                                            {
                                                @if (Model.review_before_delete.ToString() == ReviewBeforeDeleteDups.Yes.ToString())
                                                {
                                                    <label class="kt-radio" style="text-transform:capitalize;color: #333 !important;" id="@reviewBefore">
                                                        <input type="radio" name="reviewBefore" value="@reviewBefore" data-val="true" data-val-required="Please select a Review type" /> @reviewBefore.GetReviewBeforeDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.review_before_delete.ToString() == ReviewBeforeDeleteDups.No.ToString())
                                                {
                                                    <label class="kt-radio" style="text-transform:capitalize;color: #333 !important;" id="@reviewBefore">
                                                        <input type="radio" name="reviewBefore" value="@reviewBefore" data-tip="tooltip" data-val="true" data-val-required="Please select a Review type" />@reviewBefore.GetReviewBeforeDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }

                                            }
                                        }
                                    </div>
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.review_before_delete)
                                    </p>
                                </div>
                            </div>
                            <span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_REVIEW_BEFORE_DELETE</span><br/>
                            <div class="kt-section kt-section--first" style="margin:0px !important">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="dedup_type">@HeadingsAndMessage.DEDUP_ARCHIVE_DELETED_RECORDS</label>
                                    <div id="dedupType-class" class="kt-radio-inline">
                                        @foreach (ArchiveRecords archiveRecords in Enum.GetValues(typeof(ArchiveRecords)))
                                        {
                                            @if (Model.backup_before_delete == archiveRecords && isNotNewProcess)
                                            {
                                                @if (Model.backup_before_delete.ToString() == ArchiveRecords.Yes.ToString())
                                                {
                                                    <label class="kt-radio" style="text-transform:capitalize;color: #333 !important;" id="@archiveRecords">
                                                        <input type="radio" name="archiveRecords" value="@archiveRecords" data-val="true" data-val-required="Please select a Archive records type" checked="checked" /> @archiveRecords.GetArchiveRecordsDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.backup_before_delete.ToString() == ArchiveRecords.No.ToString())
                                                {
                                                    <label class="kt-radio" style="text-transform:capitalize;color: #333 !important;" id="@archiveRecords">
                                                        <input type="radio" name="archiveRecords" value="@archiveRecords" data-tip="tooltip" data-val="true" data-val-required="Please select a Archive records type" checked="checked" />@archiveRecords.GetArchiveRecordsDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                            else
                                            {
                                                @if (Model.backup_before_delete.ToString() == ArchiveRecords.Yes.ToString())
                                                {
                                                    <label class="kt-radio" style="text-transform:capitalize;color: #333 !important;" id="@archiveRecords">
                                                        <input type="radio" name="archiveRecords" value="@archiveRecords" data-val="true" data-val-required="Please select a Archive records type" /> @archiveRecords.GetArchiveRecordsDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.backup_before_delete.ToString() == ArchiveRecords.No.ToString())
                                                {
                                                    <label class="kt-radio" style="text-transform:capitalize;color: #333 !important;" id="@archiveRecords">
                                                        <input type="radio" name="archiveRecords" value="@archiveRecords" data-tip="tooltip" data-val="true" data-val-required="Please select a Archive records type" />@archiveRecords.GetArchiveRecordsDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                        }
                                    </div>
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.review_before_delete)
                                    </p>
                                </div>
                            </div>
                            <span class="Dedup_Process_Type_Tip">@HeadingsAndMessage.DEDUP_ARCHIVE_DELETE_RECORD</span>

                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*<div class="row">
            <div class="col-lg-10" id="divArchiveBeforeDelete">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first" style="margin:0px !important">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="dedup_type">@HeadingsAndMessage.DEDUP_ARCHIVE_DELETED_RECORDS</label>
                                    <div id="dedupType-class" class="kt-radio-inline">
                                        @foreach (ArchiveRecords archiveRecords in Enum.GetValues(typeof(ArchiveRecords)))
                                        {
                                            @if (Model.backup_before_delete == archiveRecords && isNotNewProcess)
                                            {
                                                @if (Model.backup_before_delete.ToString() == ArchiveRecords.Yes.ToString())
                                                {
                                                    <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@archiveRecords">
                                                        <input type="radio" name="archiveRecords" value="@archiveRecords" data-val="true" data-val-required="Please select a Archive records type" @(isNotNewProcess == false ? "" : "disabled='disabled'") checked="checked" /> @archiveRecords.GetArchiveRecordsDescription() <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.backup_before_delete.ToString() == ArchiveRecords.No.ToString())
                                                {
                                                    <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@archiveRecords">
                                                        <input type="radio" name="archiveRecords" value="@archiveRecords" data-tip="tooltip" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") data-val-required="Please select a Archive records type" checked="checked" />@archiveRecords.GetArchiveRecordsDescription() <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                            else
                                            {
                                                @if (Model.backup_before_delete.ToString() == ArchiveRecords.Yes.ToString())
                                                {
                                                    <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@archiveRecords">
                                                        <input type="radio" name="archiveRecords" value="@archiveRecords" data-val="true" data-val-required="Please select a Archive records type" @(isNotNewProcess == false ? "" : "disabled='disabled'") /> @archiveRecords.GetArchiveRecordsDescription() <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.backup_before_delete.ToString() == ArchiveRecords.No.ToString())
                                                {
                                                    <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@archiveRecords">
                                                        <input type="radio" name="archiveRecords" value="@archiveRecords" data-tip="tooltip" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") data-val-required="Please select a Archive records type" />@archiveRecords.GetArchiveRecordsDescription() <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                        }
                                    </div>
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.review_before_delete)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>*@

        <div class="row">
            <div class="col-lg-10" id="divSimulationCount">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first" style="margin:0px !important">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="dedup_type">@HeadingsAndMessage.DEDUP_EXECUTION_MODE</label>
                                    <div id="dedupType-class" class="kt-radio-inline">
                                        @foreach (DedupType dedupType in Enum.GetValues(typeof(DedupType)))
                                        {
                                            @if (Model.dedup_type == dedupType && isDedupTypeEnable)
                                            {
                                                @if (Model.dedup_type.ToString() == DedupType.Simulate_and_Verify.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@dedupType">
                                                        <input type="radio" name="dedup_type" value="@dedupType" data-val="true" data-val-required="Please select a DeDup type" @(isDedupTypeEnable == false ? "" : "disabled='disabled'") checked="checked" /> @dedupType.GetDedupTypeDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.dedup_type.ToString() == DedupType.Full_Dedup.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@dedupType">
                                                        <input type="radio" name="dedup_type" value="@dedupType" data-tip="tooltip" data-val="true" @(isDedupTypeEnable == false ? "" : "disabled='disabled'") data-val-required="Please select a DeDup type" checked="checked" />@dedupType.GetDedupTypeDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                            else
                                            {
                                                @if (dedupType.ToString() == DedupType.Simulate_and_Verify.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@dedupType">
                                                        <input type="radio" name="dedup_type" value="@dedupType" data-val="true" @(isDedupTypeEnable == false ? "" : "disabled='disabled'") data-val-required="Please select a DeDup type" /> @dedupType.GetDedupTypeDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (dedupType.ToString() == DedupType.Full_Dedup.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@dedupType">
                                                        <input type="radio" name="dedup_type" value="@dedupType" data-tip="tooltip" @(isDedupTypeEnable == false ? "" : "disabled='disabled'") data-val="true" data-val-required="Please select a DeDup type" /> @dedupType.GetDedupTypeDescription() 
                                                        @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>*@
                                                        <span></span>
                                                    </label>

                                                }
                                            }
                                        }
                                    </div>
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.dedup_type)
                                    </p>
                                </div>
                            </div>

                            <span class="Dedup_Process_Type_Tip" id="Execution_ModeText"></span><br/>

                            <div class="kt-section kt-section--first" style="margin:0px !important" id="SimulateCountSection">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="dedup_type">@HeadingsAndMessage.DEDUP_SIMULATION_COUNT</label>
                                    <div id="dedupType-class" class="kt-radio-inline">
                                        @if (isNotNewProcess)
                                        {
                                            @if (Model.simulation_count == -1)
                                            {
                                                <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                    <input type="radio" name="simulationCount" value="Entiretable" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") checked="checked" /> Entire Table 
                                                    @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                    <span></span>
                                                </label>
                                                <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                    <input type="radio" name="simulationCount" value="LimitedNumberOfRecords" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") /> Limited Number Of Records  
                                                    @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                    <span></span>
                                                </label>
                                            }
                                            else
                                            {
                                                <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                    <input type="radio" name="simulationCount" value="Entiretable" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") /> Entire Table 
                                                    @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                    <span></span>
                                                </label>
                                                <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                    <input type="radio" name="simulationCount" value="LimitedNumberOfRecords" data-val="true" @(isNotNewProcess == false ? "" : "disabled='disabled'") checked="checked" /> Limited Number Of Records 
                                                    @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                    <span></span>
                                                </label>
                                                <div style="float: right;padding-right: 45%;" name="simulationCount">
                                                    @Html.TextBoxFor(model => model.simulation_count, new { @class = "form-control col-lg-9", @readonly = "readonly" })
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                <input type="radio" name="simulationCount" value="Entiretable" data-val="true" data-val-required="Please select a simulation count" @(isNotNewProcess == false ? "" : "disabled='disabled'") /> Entire Table 
                                                @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                <span></span>
                                            </label>
                                            <label class="kt-radio  @(isNotNewProcess == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                <input type="radio" name="simulationCount" value="LimitedNumberOfRecords" data-val="true" data-val-required="Please select a simulation count" @(isNotNewProcess == false ? "" : "disabled='disabled'") /> Limited Number Of Records 
                                                @*<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>*@
                                                <span></span>
                                            </label>
                                            <div style="float: right;padding-right: 45%;">
                                                @Html.TextBoxFor(model => model.simulation_count, new { @class = "form-control col-lg-9", @placeholder = "Please enter the number of records" })
                                            </div>
                                        }

                                    </div>
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.simulation_count)
                                    </p>
                                </div>
                            </div>
                            <span class="Dedup_Process_Type_Tip" id="SimulationCountText">@HeadingsAndMessage.DEDUP_SIMULATION_COUNT_TEXT</span>
                        </div>
                    </div>
                </div>
            </div>
        @*</div>
        <div class="row">*@
            @*<div class="col-lg-10" id="divdedupTypes">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first" style="margin:0px !important">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="dedup_type">@HeadingsAndMessage.DEDUP_EXECUTION_MODE</label>
                                    <div id="dedupType-class" class="kt-radio-inline">
                                        @foreach (DedupType dedupType in Enum.GetValues(typeof(DedupType)))
                                        {
                                            @if (Model.dedup_type == dedupType && isDedupTypeEnable)
                                            {
                                                @if (Model.dedup_type.ToString() == DedupType.Simulate_and_Verify.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@dedupType">
                                                        <input type="radio" name="dedup_type" value="@dedupType" data-val="true" data-val-required="Please select a DeDup type" @(isDedupTypeEnable == false ? "" : "disabled='disabled'") checked="checked" /> @dedupType.GetDedupTypeDescription() <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (Model.dedup_type.ToString() == DedupType.Full_Dedup.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@dedupType">
                                                        <input type="radio" name="dedup_type" value="@dedupType" data-tip="tooltip" data-val="true" @(isDedupTypeEnable == false ? "" : "disabled='disabled'") data-val-required="Please select a DeDup type" checked="checked" />@dedupType.GetDedupTypeDescription() <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                            else
                                            {
                                                @if (dedupType.ToString() == DedupType.Simulate_and_Verify.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@dedupType">
                                                        <input type="radio" name="dedup_type" value="@dedupType" data-val="true" @(isDedupTypeEnable == false ? "" : "disabled='disabled'") data-val-required="Please select a DeDup type" /> @dedupType.GetDedupTypeDescription() <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.SIMULATE_TOOLTIP" style="color: #ffa500;"></i>
                                                        <span></span>
                                                    </label>
                                                }
                                                else if (dedupType.ToString() == DedupType.Full_Dedup.ToString())
                                                {
                                                    <label class="kt-radio  @(isDedupTypeEnable == false ? " " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;" id="@dedupType">
                                                        <input type="radio" name="dedup_type" value="@dedupType" data-tip="tooltip" @(isDedupTypeEnable == false ? "" : "disabled='disabled'") data-val="true" data-val-required="Please select a DeDup type" /> @dedupType.GetDedupTypeDescription() <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.FULL_DEDUP_TOOLTIP" style="color: #ffa500;"></i>
                                                        <span></span>
                                                    </label>

                                                }
                                            }
                                        }
                                    </div>
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.dedup_type)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>*@
        </div>

        <div class="row">
            <div class="col-lg-10">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first" style="margin:0px !important">
                                <div class="form-group" style="margin:0px !important">
                                    <label for="connectorName">@HeadingsAndMessage.DEDUP_PROCESS_NAME</label>
                                    @Html.TextBoxFor(model => model.connectorName, new { @class = "form-control col-lg-9", @placeholder = "Please enter DeDup Process name" })
                                    @Html.ValidationMessageFor(model => model.connectorName)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row" id="destionationDb">
            <div class="col-lg-10">
                <div class="kt-portlet">
                    <div class="kt-portlet__head">
                        <div class="kt-portlet__head-label">
                            <h3 class="kt-portlet__head-title">
                                @HeadingsAndMessage.DEDUP_DESTINATION_DATABASE_INFO
                                <i class="fa fa-info-circle" id="tooltip_destination" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_DESTINATION_TABLE_TOOLTIP" style="color: #ffa500;"></i>
                            </h3>
                        </div>
                    </div>
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first">
                                <div class="form-group">
                                    <label for="dataSource"> @HeadingsAndMessage.DEDUP_DESTINATION_DATABASE_TYPE</label>
                                    <select data-val="true" class="form-control col-md-9" data-val-required="The destination field is required." id="syncDestination" name="syncDestination" style="margin-left:0px">
                                        <option value="">Please select Destination</option>
                                        @foreach (ConnectorType connectorType in Enum.GetValues(typeof(ConnectorType)))
                                        {
                                            if (connectorType != ConnectorType.Azure_SQL)
                                            {
                                                if (disableConnectorType(connectorType))
                                                {
                                                    var optionTxt = string.Empty;
                                                    switch (connectorType)
                                                    {
                                                        case ConnectorType.Azure_SQL:
                                                            optionTxt = string.Format("{0} {1}", connectorType.ToString().Replace("_", " "), (isPlanInfoAvail && (currentPlanFeatures.addedDedupProcessCount >= currentPlanFeatures.max_dedup_process_allowed ? false : true) ? "" : "(add-on plan limit reached)"));
                                                            break;
                                                        default:
                                                            optionTxt = string.Format("{0} {1}", connectorType.ToString().Replace("_", " "), (isPlanInfoAvail && (currentPlanFeatures.addedDedupProcessCount >= currentPlanFeatures.max_dedup_process_allowed ? false : true) ? "" : "(add-on plan limit reached)"));
                                                            break;
                                                    }
                                                    if (Model.syncDestination == connectorType)
                                                    {
                                                        <option value="@connectorType" disabled="disabled" selected="selected">@optionTxt</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@connectorType" disabled="disabled">@optionTxt</option>
                                                    }
                                                }
                                                else
                                                {
                                                    if (Model.syncDestination == connectorType)
                                                    {
                                                        <option value="@connectorType" selected="selected">@connectorType.ToString().Replace("_", " ")</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@connectorType">@connectorType.ToString().Replace("_", " ")</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.syncDestination)
                                </div>
                                <div data-syncDestination="Database" style="padding-top:0px;display:none;">
                                    <div class="form-group">
                                        <label for="destDBConfig.syncDefaultDatabaseUrl">@HeadingsAndMessage.DEDUP_DESTINATION_DATABASE_URL</label>
                                        <div class="row">
                                            <div class="col-md-9">
                                                @if (string.IsNullOrEmpty(Model.destDBConfig.syncDefaultDatabaseUrl))
                                                {
                                                    @Html.TextAreaFor(model => model.destDBConfig.syncDefaultDatabaseUrl, (isPostgresConnectorEnable || isSqlConnectorEnable ? (object)new { @class = "form-control", style = "height:85px", @placeholder = "Please enter database url", @disabled = "disabled" } : (object)new { @class = "form-control", style = "height:85px", @placeholder = "Please enter database url", @readonly = "" }))
                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(model => model.destDBConfig.syncDefaultDatabaseUrl, (isPostgresConnectorEnable || isSqlConnectorEnable ? (object)new { @class = "form-control", style = "height:85px", @placeholder = "Please enter database url", @readonly = "readonly", @disabled = "disabled" } : (object)new { @class = "form-control", style = "height:85px", @placeholder = "Please enter database url", @readonly = "" }))
                                                }
                                            </div>
                                            <div name="dest_action_container" class="col-md-3" style="display:block;">
                                                <table style="white-space: nowrap;">
                                                    <tr>
                                                        <td>
                                                            <a href="javascript:void(0);" name="dest_db_save" title="Save">Save</a>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.destDBConfig.syncDefaultDatabaseUrl)
                                    </div>
                                    <div class="form-group">
                                        <label for="destDBSchema">@HeadingsAndMessage.DEDUP_DESTINATION_DB_SCHEMA</label>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <select name="destDBSchema" class="form-control col-md-9" id="destDBSchema">
                                                    <option value="">Please select a database schema</option>
                                                </select>
                                                @Html.ValidationMessageFor(x => x.destDBSchema)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="destObjectName">@HeadingsAndMessage.DEDUP_DESTINATION_TABLE</label>
                                        <div class="row">
                                            <div class="col-lg-9">
                                                @Html.TextBoxFor(model => model.destObjectName, (isPostgresConnectorEnable || isSqlConnectorEnable ? (object)new { @class = "form-control", @placeholder = "Please enter database table name", @autocomplete = "on" } : (object)new { @class = "form-control", @placeholder = "Please enter database table name", @autocomplete = "off" }))
                                                @*@if (string.IsNullOrEmpty(Model.destObjectName))
                                                {
                                                @Html.TextBoxFor(model => model.destObjectName, (isPostgresConnectorEnable || isSqlConnectorEnable ? (object)new { @class = "form-control", @placeholder = "Please enter database table name", @autocomplete = "off" } : (object)new { @class = "form-control", @placeholder = "Please enter database table name", @autocomplete = "off" }))
                                                }
                                                else
                                                {
                                                @Html.TextBoxFor(model => model.destObjectName, (isPostgresConnectorEnable || isSqlConnectorEnable ? (object)new { @class = "form-control", @placeholder = "Please enter database table name", @autocomplete = "off" } : (object)new { @class = "form-control", @placeholder = "Please enter database table name", @autocomplete = "off" }))
                                                }*@
                                                @Html.ValidationMessageFor(model => model.destObjectName)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-10" id="mainsource">
                <div class="kt-portlet">
                    <div class="kt-portlet__head">
                        <div class="kt-portlet__head-label">
                            <h3 class="kt-portlet__head-title" id="source_title">
                                @HeadingsAndMessage.DEDUP_SOURCE_DATABASE_INFO
                                <i class="fa fa-info-circle" id="tooltip_single" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_SOURCE_WITH_SINGLE_PROCESSS_TYPE_TOOLTIP" style="color: #ffa500;"></i>
                                <i class="fa fa-info-circle" id="tooltip_multiple" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_SOURCE_WITH_MULTIPLE_PROCESSS_TYPE_TOOLTIP" style="color: #ffa500;"></i>
                            </h3>
                        </div>
                    </div>
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first">
                                <div class="form-group">
                                    <label for="dataSource">@HeadingsAndMessage.DEDUP_SOURCE_DATABASE_TYPE</label>
                                    <select id="dataSource" class="form-control col-md-9" name="dataSource" data-val="true" data-val-required="Please select a data source" style="margin-left:0px" @(Model.connectorId.HasValue ? "disabled=disabled" : "")>
                                        @foreach (DataSource ds in Enum.GetValues(typeof(DataSource)))
                                        {
                                            if (ds != DataSource.Azure_SQL)
                                            {
                                                switch (ds)
                                                {
                                                    case DataSource.None:
                                                        <option value="">Please select Data Source</option>
                                                        break;
                                                    case DataSource.Heroku_Postgres:
                                                    case DataSource.Azure_Postgres:
                                                    case DataSource.AWS_Postgres:
                                                    case DataSource.Azure_SQL:
                                                        if (Model.dataSource == ds)
                                                        {
                                                            <option value="@ds" selected="selected">@ds.ToString().Replace("_", " ")</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@ds">@ds.ToString().Replace("_", " ")</option>
                                                        }
                                                        break;
                                                    default:
                                                        <option value="@ds" disabled="disabled">@ds.ToString().Replace("_", " ")</option>
                                                        break;
                                                }
                                            }
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.dataSource)
                                </div>
                                <div class="form-group" data-dataSource="Database" style="padding-top: 0px;">
                                    <label for="dbConfig.syncDefaultDatabaseUrl">@HeadingsAndMessage.DEDUP_SOURCE_DATABASE_URL</label>
                                    <div class="row">
                                        <div class="col-md-9">
                                            @if (string.IsNullOrEmpty(Model.dbConfig.syncDefaultDatabaseUrl))
                                            {
                                                @Html.TextAreaFor(model => model.dbConfig.syncDefaultDatabaseUrl, new { @class = "form-control", style = "height:85px", @placeholder = "Please enter database url" })
                                            }
                                            else
                                            {
                                                @Html.TextAreaFor(model => model.dbConfig.syncDefaultDatabaseUrl, new { @class = "form-control", style = "height:85px", @placeholder = "Please enter database url", @readonly = "readonly" })
                                            }
                                            @Html.ValidationMessageFor(model => model.dbConfig.syncDefaultDatabaseUrl)
                                        </div>
                                        <div name="db_action_container" class="col-md-3" style="display:@(Model.connectorId.HasValue?"none":"block");">
                                            <table style="white-space: nowrap;">
                                                <tr>
                                                    <td style="display:@(string.IsNullOrEmpty(Model.dbConfig.syncDefaultDatabaseUrl) ? " none" : "inline-block" );">
                                                        <a href="javascript:void(0);" name="db_edit" title="Edit">Edit</a>&nbsp;&nbsp;|&nbsp;&nbsp;
                                                    </td>
                                                    <td>
                                                        <a href="javascript:void(0);" name="src_db_save" title="Save">Save</a>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" data-dataSource="Database">
                                    <label for="dbSchema">@HeadingsAndMessage.DEDUP_SOURCE_DB_SCHEMA</label>
                                    <select name="dbSchema" class="form-control col-md-9" id="dbSchema" data-val="true" data-val-required="Please select a data source schema" @(Model.connectorId.HasValue ? "disabled=disabled" : "")>
                                        <option value="">Please select a database schema</option>
                                    </select>
                                    @Html.ValidationMessageFor(x => x.dbSchema)
                                </div>
                                <div class="form-group">
                                    <label for="sourceObjectName">@HeadingsAndMessage.DEDUP_SOURCE_TABLE</label>
                                    <select name="sourceObjectName" class="form-control col-md-9" id="sourceObjectName" data-val="true" data-val-required="Please select a data source object" @(Model.connectorId.HasValue ? "disabled=disabled" : "")>
                                        <option value="">Please select a data source object</option>
                                    </select>
                                    @Html.ValidationMessageFor(x => x.sourceObjectName)
                                </div>
                                <div class="form-group" id="divFieldContainer" style="display:none;">
                                    <label for="sourceObjectFields">@HeadingsAndMessage.DEDUP_SOURCE_TABLE_COLUMNS @currentPlanFeatures.max_fields_to_compare)</label>
                                    <div class="kt-checkbox-inline" id="divCheckBoxList"></div>
                                    <span style="font-weight:bold;color:red;">
                                        <br />
                                        @HeadingsAndMessage.LINK_MESSAGE <a target="_blank" href="https://elements.heroku.com/addons/dedup" style="font-weight:normal"> Click here</a>
                                    </span>
                                    <p class="no-padding no-margin" style="clear:both;">
                                        @Html.ValidationMessageFor(x => x.sourceObjectFields)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-6" id="dbconfig_compare" style="pointer-events: none;">
                <div class="kt-portlet">
                    <div class="kt-portlet__head">
                        <div class="kt-portlet__head-label">
                            <h3 class="kt-portlet__head-title">
                                <span id="compareHeadingName"></span>@*@HeadingsAndMessage.DEDUP_COMPARE_DATABASE_INFO*@
                                <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_COMPARE_TABLE_TOOLTIP" style="color: #ffa500;"></i>
                            </h3>
                        </div>
                    </div>
                    <div id="div-sourcetableFirst" style="z-index: 1;top: 23%;left: 26%;position: absolute;margin: 0;padding: 0;font-size: 1.2rem;font-weight: 500;color:rgb(234, 56, 13);">Select Source Table First</div>
                    <div class="kt-form" id="div_opacity" style="opacity: 0;">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first">
                                <div class="form-group">
                                    <label for="dbConfig_compare.dataSource">@HeadingsAndMessage.DEDUP_COMPARE_DATABASE_TYPE</label>
                                    <select id="dbConfig_compare_dataSource" class="form-control col-md-9" name="dbConfig_compare.dataSource" data-val="true" data-val-required="Please select a data source" style="margin-left:0px" @(Model.connectorId.HasValue ? "disabled=disabled" : "")>
                                        @foreach (DataSource ds in Enum.GetValues(typeof(DataSource)))
                                        {
                                            if (ds != DataSource.Azure_SQL)
                                            {
                                                switch (ds)
                                                {
                                                    case DataSource.None:
                                                        <option value="">Please select Data Source</option>
                                                        break;
                                                    case DataSource.Heroku_Postgres:
                                                    case DataSource.Azure_Postgres:
                                                    case DataSource.AWS_Postgres:
                                                    case DataSource.Azure_SQL:
                                                        if (Model.dbConfig_compare.dataSource == ds)
                                                        {
                                                            <option value="@ds" selected="selected">@ds.ToString().Replace("_", " ")</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@ds">@ds.ToString().Replace("_", " ")</option>
                                                        }
                                                        break;
                                                    default:
                                                        <option value="@ds" disabled="disabled">@ds.ToString().Replace("_", " ")</option>
                                                        break;
                                                }
                                            }
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.dbConfig_compare.dataSource)
                                </div>
                                <div class="form-group" data-compareSource="Database" style="padding-top: 0px;">
                                    <label for="dbConfig_compare.syncDefaultDatabaseUrl">@HeadingsAndMessage.DEDUP_COMPARE_DATABASE_URL</label>
                                    <div class="row">
                                        <div class="col-md-9">
                                            @if (string.IsNullOrEmpty(Model.dbConfig_compare.syncDefaultDatabaseUrl))
                                            {
                                                @Html.TextAreaFor(model => model.dbConfig_compare.syncDefaultDatabaseUrl, new { @class = "form-control", style = "height:85px", @placeholder = "Please enter database url" })
                                            }
                                            else
                                            {
                                                @Html.TextAreaFor(model => model.dbConfig_compare.syncDefaultDatabaseUrl, new { @class = "form-control", style = "height:85px", @placeholder = "Please enter database url", @readonly = "readonly" })
                                            }
                                            @Html.ValidationMessageFor(model => model.dbConfig_compare.syncDefaultDatabaseUrl)
                                        </div>
                                        <div name="db_compare_action_container" class="col-md-3" style="visibility:@(Model.connectorId.HasValue ? " hidden" : (string.IsNullOrEmpty(Model.dbConfig_compare.syncDefaultDatabaseUrl) ? "visible" : "hidden" ));">
                                            <table style="white-space: nowrap;">
                                                <tr>
                                                    <td style="display:@(string.IsNullOrEmpty(Model.dbConfig_compare.syncDefaultDatabaseUrl) ? " none" : "inline-block" );">
                                                        <a href="javascript:void(0);" name="compare_db_edit" title="Edit">Edit</a>&nbsp;&nbsp;|&nbsp;&nbsp;
                                                    </td>
                                                    <td>
                                                        <a href="javascript:void(0);" name="compare_db_save" title="Save">Save</a>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" data-dbConfig_compare="Database">
                                    <label for="dbConfig_compare.db_schema">@HeadingsAndMessage.DEDUP_COMPARE_DB_SCHEMA</label>
                                    <select name="dbConfig_compare.db_schema" class="form-control col-md-9" id="dbConfig_compare_db_schema" data-val="true" data-val-required="Please select a data source schema" @(Model.connectorId.HasValue ? "disabled=disabled" : "")>
                                        <option value="">Please select a database schema</option>
                                    </select>
                                    @Html.ValidationMessageFor(x => x.dbConfig_compare.db_schema)
                                </div>
                                @*<div class="form-group">
                                    <div class="kt-radio-inline">
                                        @foreach (SelectedTableType tableType in Enum.GetValues(typeof(SelectedTableType)))
                                        {
                                            @if (Model.dbConfig_compare.table_type == tableType && isTableType)
                                            {
                                                <label class="kt-radio  @(isTableType == false ?" ":" kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                    <input type="radio" name="dedupTableType" value="@tableType" data-val="true" @(isTableType == false ? "" : "disabled='disabled'") data-tip="tooltip" checked="checked" data-val-required="Please select a DeDup Process type" />@tableType.ToString().Replace("_", " ") <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_MULTIPLE_PROCESS_TOOLTIP" style="color: #ffa500;"></i>
                                                    <span></span>
                                                </label>
                                            }
                                            else
                                            {
                                                <label class="kt-radio  @(isTableType == false ? " ": " kt-radio--disabled") " style="text-transform:capitalize;color: #333 !important;">
                                                    <input type="radio" name="dedupTableType" value="@tableType" data-val="true" @(isTableType == false ? "" : "disabled='disabled'") data-tip="tooltip" data-val-required="Please select a DeDup Process type" />@tableType.ToString().Replace("_", " ")<i class="fa fa-info-circle" data-toggle="tooltip" data-placement="right" title="@HeadingsAndMessage.DEDUP_MULTIPLE_PROCESS_TOOLTIP" style="color: #ffa500;"></i>
                                                    <span></span>
                                                </label>
                                            }
                                        }
                                    </div>
                                    <p class="" style="clear:both;padding-left: 15px;margin-left: 15px;">
                                        @Html.ValidationMessageFor(model => model.dbConfig_compare.table_type)
                                    </p>
                                </div>*@
                                <div class="form-group" data-new-table-compare="CompareNewObjectname" style="display:none;">
                                    @Html.TextBoxFor(model => model.dbConfig_compare.new_table_name, new { @class = "form-control col-lg-9", @placeholder = "Please enter new table name" })
                                    @Html.ValidationMessageFor(model => model.dbConfig_compare.new_table_name)
                                </div>
                                <div class="form-group" data-table-compare="CompareObjectname">
                                    <label for="dbConfig_compare.object_name">@HeadingsAndMessage.DEDUP_COMPARE_TABLE</label>
                                    <select name="dbConfig_compare.object_name" class="form-control col-md-9" id="dbConfig_compare_object_name" data-val="true" data-val-required="Please select a data source object" @(Model.connectorId.HasValue ? "disabled=disabled" : "")>
                                        <option value="">Please select a data source object</option>
                                    </select>
                                    @Html.ValidationMessageFor(x => x.dbConfig_compare.object_name)
                                </div>

                                <div class="form-group" id="divCompareFieldContainer" style="display:none;">
                                    <label for="compareObjectFieldsMapping">@HeadingsAndMessage.DEDUP_COMPARE_TABLE_COLUMNS</label>
                                    <div class="kt-checkbox-inline" id="divCompareCheckBoxList"></div>
                                    <p class="no-padding no-margin" style="clear:both;">
                                        @Html.ValidationMessageFor(x => x.compareObjectFieldsMapping)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" id="dedupSyncFilter" style="display:none">
            <div class="col-lg-10">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first">
                                <div class="form-group">
                                    <label>@HeadingsAndMessage.DEDUP_SYNC_WITH_FILTER_COLUMN</label>
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <span for="srcNewRecordFilter" class="col-md-8 no-padding">
                                                    @HeadingsAndMessage.DEDUP_SYNC_WITH_FILTER_COLUMN_TO_NEW_RECORD_INSERT
                                                    <label style="font-style:italic;font-weight: normal;">@HeadingsAndMessage.DEDUP_SYNC_WITH_FILTER_COLUMN_TO_NEW_RECORD_HINT</label>
                                                </span>
                                            </div>
                                            <div class="col-md-4">
                                                <select class="form-control col-md-9" name="srcNewRecordFilter" id="srcNewRecordFilter" style="margin-left:20px;text-transform:capitalize;color: #333 !important;" data-val="true" data-val-required="Please select a date time to filter new records">
                                                    @if (Model.srcNewRecordFilter == "None")
                                                    {
                                                        <option value="None" selected="selected">None</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="None">None</option>
                                                    }
                                                </select>
                                                @Html.ValidationMessageFor(x => x.srcNewRecordFilter)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-md-8">
                                                <span for="srcUpdateRecordFilter" class="col-md-8 no-padding">
                                                    @HeadingsAndMessage.DEDUP_SYNC_WITH_FILTER_COLUMN_TO_EXISTING_RECORDS_UPDATE
                                                    <label style="font-style:italic;font-weight: normal;">@HeadingsAndMessage.DEDUP_SYNC_WITH_FILTER_COLUMN_TO_UPDATE_RECORDS_HINT</label>
                                                </span>
                                            </div>
                                            <div class="col-md-4">
                                                <select class="form-control col-md-9" name="srcUpdateRecordFilter" id="srcUpdateRecordFilter" style="margin-left:20px;text-transform:capitalize;color: #333 !important;" data-val="true" data-val-required="Please select a date time to filter updated records">
                                                    @if (Model.srcUpdateRecordFilter == "None")
                                                    {
                                                        <option value="None" selected="selected">None</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="None">None</option>
                                                    }
                                                </select>
                                                @Html.ValidationMessageFor(x => x.srcUpdateRecordFilter)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-10">
                <div class="kt-portlet">
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            <div class="kt-section kt-section--first">
                                <div class="form-group">
                                    <label for="scheduleType">@HeadingsAndMessage.DEDUP_SCHEDULE</label>
                                    <div class="kt-radio-inline ">
                                        @foreach (ScheduleType scheduleType in Enum.GetValues(typeof(ScheduleType)))
                                        {
                                            @if (Model.scheduleType == scheduleType)
                                            {
                                                @if (isScheduleTypeEnable)
                                                {
                                                    <label class="kt-radio col-md-3 @(isScheduleTypeEnable ?" " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="scheduleType" value="@scheduleType" data-val="true" data-val-required="Please select a schedule type" checked="checked">@scheduleType.ToString().ToLower().Replace("_", " ")
                                                        <span></span>
                                                    </label>
                                                }
                                                else
                                                {
                                                    <label class="kt-radio col-md-3 @(isScheduleTypeEnable ?" " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="scheduleType" value="@scheduleType" disabled="disabled" data-val="true" data-val-required="Please select a schedule type" checked="checked">@scheduleType.ToString().ToLower().Replace("_", " ")
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                            else
                                            {
                                                @if (isScheduleTypeEnable)
                                                {
                                                    <label class="kt-radio col-md-3 @(isScheduleTypeEnable ?" " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="scheduleType" value="@scheduleType" data-val="true" data-val-required="Please select a schedule type">@scheduleType.ToString().ToLower().Replace("_", " ")
                                                        <span></span>
                                                    </label>
                                                }
                                                else
                                                {
                                                    <label class="kt-radio col-md-3 @(isScheduleTypeEnable ?" " : " kt-radio--disabled")" style="text-transform:capitalize;color: #333 !important;">
                                                        <input type="radio" name="scheduleType" value="@scheduleType" disabled="disabled" data-val="true" data-val-required="Please select a schedule type">@scheduleType.ToString().ToLower().Replace("_", " ")
                                                        <span></span>
                                                    </label>
                                                }
                                            }
                                        }
                                    </div>
                                    <p class="no-padding no-margin">
                                        @Html.ValidationMessageFor(model => model.scheduleType)
                                    </p>
                                </div>
                                <div class="form-group" name="custom_sync_container" style="clear:both;display:@(Model.scheduleType==ScheduleType.CUSTOM && isScheduleTypeEnable?" block":"none")">
                                    <div class="col-md-6" style="margin-left: 0px;padding-left:0px;float:left;">
                                        @if (Model.customScheduleInMinutes > 0)
                                        {
                                            @Html.TextBoxFor(model => model.customScheduleInMinutes, (isScheduleTypeEnable ? (object)new { @class = "form-control", @placeholder = "Please enter minutes", @readonly = "readonly", @disabled = "disabled" } : (object)new { @class = "form-control", @placeholder = "Please enter minutes", @readonly = "readonly" }))
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.customScheduleInMinutes, (isScheduleTypeEnable ? (object)new { @class = "form-control", @placeholder = "Please enter minutes", @disabled = "disabled" } : (object)new { @class = "form-control", @placeholder = "Please enter minutes", @readonly = "readonly" }))
                                        }
                                    </div>
                                    <div class="col-md-2" style="padding-left: 5px;line-height: 34px;float:left;">
                                        Minutes
                                        &nbsp;<a href="javascript:void(0);" name="edit" title="Edit" style="display:@(Model.connectorId>0 && Model.customScheduleInMinutes>0?" inline-block":"none");">Edit</a>
                                    </div>
                                    <p class="" style="clear:both;padding-left: 0px;margin-left: 0px;">
                                        @Html.ValidationMessageFor(model => model.customScheduleInMinutes)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-9 margin-bottom">
                <span id="lblMessage"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-md-9" style="margin-left:30px;">
                <button type="button" class="btn btn-brand" name="btnSaveConnector">Save Process</button>&nbsp;
                <button type="button" class="btn btn-brand" name="btnCancel">Cancel &amp; Exit</button>
            </div>
        </div>
    </div>
}


@section Scripts{
    <script src="~/js/bundlejueryval.min.js" type="text/javascript"></script>
    <script src="~/js/site-validation.js"></script>
    <script type="text/javascript">
        var controllerPath = '/connector/';
        var connectorConfig, dataSourceTables = [], busyLoaderStatus = [], selectedColumnArray = [], noOfColumn;
        var isCompareEnabled = false;
        var selectedMatchingColumn={Source1:"",Source2:""};
        $(document).ready(function () {
			//KTFormControls.init();

            //$('[data-toggle="tooltip"]').tooltip();
            connectorConfig = {
                id:-1,
                ccid: $('[name=ETuuid]').val(),
                customerKey: $('[name=ETKey]').val(),
                dataFields: $('[name=ETFields]').val(),
                compareSrcObjectFields: $('[name=CSFields]').val(),
                sourceObjectName: '@Model.sourceObjectName',
                syncDestination: '@Model.syncDestination',
                dataSource: '@Model.dataSource',
                twoWaySyncRequired: '@Model.twoWaySyncPriority',
                dbSchema: '@Model.dbSchema',
                destDBSchema: '@Model.destDBSchema',
                scheduleType: '@Model.scheduleType',
                dbConfig: {},
                destDBConfig: {},
                dbConfig_compare:{},
                dedupSourceType:'@Model.dedupSourceType',
                dedup_type:'@Model.dedup_type',
                isNew:false
            };
            connectorConfig.id=@(Model.connectorId.HasValue ? Model.connectorId.Value : 0);
            connectorConfig.isNew=(connectorConfig.id > 0 ? false : true);
            if (connectorConfig.dedupSourceType == '@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B' ||
                connectorConfig.dedupSourceType == '@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination') {
                connectorConfig.dbConfig_compare.dataSource='@Model.dbConfig_compare.databaseType';
                connectorConfig.dbConfig_compare.db_schema='@Model.dbConfig_compare.db_schema';
                connectorConfig.dbConfig_compare.object_name = '@Model.dbConfig_compare.object_name';
                if ('@Model.dbConfig_compare.table_type' == '@SelectedTableType.Create_New_Table') {
                    connectorConfig.dbConfig_compare.table_type = '@Model.dbConfig_compare.table_type';
                    connectorConfig.dbConfig_compare.new_table_name = '@Model.dbConfig_compare.new_table_name';
                }
            }
            if(connectorConfig.isNew)
            {
                if (@currentPlanFeatures.max_dedup_process_allowed<=@currentPlanFeatures.addedDedupProcessCount) {
                    $("#div-disable-plan-limit").show();
                    $("#div_form-opacity").css("opacity", "0");
                    return;
                }
                else {
                      $("#div-disable-plan-limit").hide();
                     $("#div_form-opacity").removeAttr("style", "opacity:0");
                }

                if (connectorConfig.dedupSourceType == '@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B' ||
                connectorConfig.dedupSourceType == '@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination') {
					//$("#Safe_Mode").show();
                       $("#dedupSyncFilter").show();
                    $("#Safe_Mode").hide();
                    $("#tooltip_multiple").show();
                    $("#tooltip_single").hide();
                }
                else {
                    $("#Safe_Mode").hide();
                    $("#tooltip_single").show();
                    $("#tooltip_multiple").hide();
                }
                $('input[name=dedupSourceType]:first').prop("checked", "checked");
                $('input[name=dedup_type]:first').prop("checked", "checked");
                //Added by Kathir on 19-8-2020
                $('input[name=archiveRecords]:first').prop("checked", "checked");
                $('input[name=reviewBefore]:first').prop("checked", "checked");
                $('input[name=methodType]:first').prop("checked", "checked");
                 //Added by Kathir on 26-8-2020
                $('input[name=simulationCount]:first').prop("checked", "checked");
                $("#simulation_count").hide();
                //$('input[name=dedupTableType]:first').prop("checked", "checked");
                $("div[data-table-compare=CompareObjectname]").hide();
                $("div[id=divCompareFieldContainer]").hide();
                $("div[data-new-table-compare=CompareNewObjectname]").show();
                //Meghna

                $("#Execution_ModeText").text("@HeadingsAndMessage.DEDUP_EXECUTION_MODE_SIMULATE");

                if ("@DedupType.Full_Dedup" ==$('input[name=dedup_type]').val()) {
                    if ($("[name=isScheduleAllow]").val() == "True") {
                        $("input[name=scheduleType]").prop("disabled", false);
                        $("input[name=scheduleType]").closest("label").removeClass("kt-radio--disabled");
                    }
                }
                else {
                    $("input[name=scheduleType]").prop("disabled", true);
                    $("input[name=scheduleType]").closest("label").addClass("kt-radio--disabled");
                }
            }
            else
            {
                if ($("input[name=simulationCount]:checked").val().toLowerCase() == "entiretable") {
                    $("#simulation_count").hide();
                    $("div[name=simulationCount]").hide();
                }
                else {
                     $("div[name=simulationCount]").show();
                }
                 $("#div-disable-plan-limit").hide();
                 $("#div_form-opacity").removeAttr("style", "opacity:0");
            if (connectorConfig.dedupSourceType == '@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B' ||
                    connectorConfig.dedupSourceType == '@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination') {
                    //$("#Safe_Mode").show();
                       $("#dedupSyncFilter").show();
                    $("#Safe_Mode").hide();
                    $("#tooltip_multiple").show();
                    $("#tooltip_single").hide();
                    $("#mainsource").attr("class", "col-lg-6");
                $("#dbConfig_compare_new_table_name").attr("readonly", "readonly");
                if (connectorConfig.dedupSourceType == '@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B') {
                    $("#compareHeadingName").text("@HeadingsAndMessage.DEDUP_COMPARE_TABLE_HEADING_2");
                    $("#source_title").text("@HeadingsAndMessage.DEDUP_SOURCE_DATABASE_INFO2");
                }
                else {
                      $("#compareHeadingName").text("@HeadingsAndMessage.DEDUP_COMPARE_TABLE_HEADING_1");
                }
                }
                else {
                    $("#Safe_Mode").hide();
                    $("#tooltip_single").show();
                    $("#tooltip_multiple").hide();
                }
                if (connectorConfig.dedupSourceType == '@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B') {
                    connectorConfig.compareObjectFieldsMapping = '@JsonConvert.SerializeObject(Model.compareObjectFieldsMapping)';
                }
                if(connectorConfig.dedup_type=='@DedupType.Full_Dedup')
                {
                    $("#syncDestination").prop("disabled",true);
                    $("#destDBConfig_syncDefaultDatabaseUrl").prop("disabled",true);
                    $("#destDBSchema").prop("disabled",true);
                    $("#destObjectName").prop("disabled",true);
                    $("#destionationDb").hide();
                    if ($("[name=isScheduleAllow]").val() == "True")
                    {
                        $("input[name=scheduleType]").prop("disabled", false);
                        $("input[name=scheduleType]").closest("label").removeClass("kt-radio--disabled");
                    }
                    $("#Execution_ModeText").text("@HeadingsAndMessage.DEDUP_EXECUTION_MODE_DEDUP");
                    $("#SimulateCountSection").hide();
                    $("#SimulationCountText").hide();
                }
                else
                {
                    $("input[name=scheduleType]").prop("disabled", true);
                    $("input[name=scheduleType]").closest("label").addClass("kt-radio--disabled");
                    $("#Execution_ModeText").text("@HeadingsAndMessage.DEDUP_EXECUTION_MODE_SIMULATE");
                }
            }
            noOfColumn=@currentPlanFeatures.max_fields_to_compare;

            var modal = document.getElementById('divColumnSelect');
            var span = document.getElementsByClassName("close")[0];
            span.onclick = function() {
                modal.style.display = "none";
            }

            $("#popupClose").on("click",function()
            {
                var source1Column = $("#divColumnSelect div[class='modal-body'] div[class=row]").attr("data-source1-column");
                var sourceType = $("#divColumnSelect div[class='modal-body'] div[class=row]").attr("data-source-name");
                if (sourceType == "src1") {
                    $("#divCheckBoxList input[value='" + source1Column + "']").prop("checked", false);
                }

                if (sourceType == "src2") {
                    $("#divCompareCheckBoxList input[value='" + source1Column + "']").prop("checked", false);
                }

                disableSoruceDataColumn();
                disableCompareSoruceDataColumn();
            });

            $("#btnColumnSelect").on("click",function() {
                var selectedValue=$("#divColumnSelect div[class='modal-body'] input[type=radio]:checked").val()
                var source1Column=$("#divColumnSelect div[class='modal-body'] div[class=row]").attr("data-source1-column");
                var sourceType=$("#divColumnSelect div[class='modal-body'] div[class=row]").attr("data-source-name");

                if(sourceType=="src1")
                {
                    if(selectedValue)
                    {
                        $("#divCompareCheckBoxList input[type=checkbox]:not(:checked)").each(function(element)
                        {
                            if($(this).val()==selectedValue)
                            {
                                $(this).attr("data-source1-column",source1Column);
                                $(this).prop("checked",true);
                            }
                        });
                        $("#divColumnSelect").hide();
                    }
                    else
                    {
                        alert("Please select one column");
                    }
                    disableCompareSoruceDataColumn();
                }
                else
                {
                    if(selectedValue)
                    {
                        $("#divCompareCheckBoxList input[type=checkbox]").each(function (element) {
                            if ($(this).val() == source1Column) {
                                $(this).attr("data-source1-column", selectedValue);
								//$(this).prop("checked", true);
                            }
                        });
                        $("#divCheckBoxList input[type=checkbox]:not(:checked)").each(function(element)
                        {
                            if($(this).val()==selectedValue)
                            {
                                //$(this).attr("data-source1-column",source1Column);
                                $(this).prop("checked",true);
                            }
                        });
                        $("#divColumnSelect").hide();
                    }
                    else
                    {
                        alert("Please select one column");
                    }
                    disableSoruceDataColumn();
                }
            });

            $("[name=selectAll]").on("change", function () {
                $("[name=sourceObjectFields]").prop("checked", $(this).is(":checked"));
                var selectedFields = $('[name=sourceObjectFields]:checked');
                if (selectedFields.length > 0) {
                    $(selectedFields).closest('.form-group').removeClass('has-error');
                    $("span[data-valmsg-for=sourceObjectFields]").removeClass('help-block').html('');
                }
            });
        //Commented by kathir on 19-8-2020
     //       $("input[type=radio][name=dedupTableType]").on("change", function (e) {
     //           var selectedValue = $(this).val();
     //           connectorConfig.dbConfig_compare.table_type = $(this).val();
     //           if (selectedValue=="Create_New_Table") {
     //               $("div[data-table-compare=CompareObjectname]").hide();
     //               $("div[id=divCompareFieldContainer]").hide();
     //               $("div[data-new-table-compare=CompareNewObjectname]").show();
     //           }
     //           else {
     //               $("div[data-table-compare=CompareObjectname]").show();
     //               $("div[data-new-table-compare=CompareNewObjectname]").hide();
     //           }
     //           $("#divCheckBoxList input[type=checkbox]").each(function() {
					//$(this).prop("checked",false);
     //           });
     //           $("#dbConfig_compare_new_table_name").val('');
     //           $("#divCheckBoxList input[type=checkbox]").prop("disabled", false);
     //           $("#divCheckBoxList input[type=checkbox]").closest("label").removeClass("kt-checkbox--disabled");
     //           $("#dbConfig_compare_object_name")[0].selectedIndex = 0;
     //       });

            //Meghna
            //$("input[type=radio][name=methodType]").on("change", function (e) {

            //    if ($("input[name=methodType]:checked").val().toLowerCase() == "fuzzy_compare") {

            //        $("#fuzzy_comparebox").show();
            //    }
            //    else {
            //        $("#fuzzy_comparebox").hide();
            //    }
            //    if ($("select[name=sourceObjectName]").find("option:selected").val().length > 0) {
            //        $('[name=ETName]').val($("select[name=sourceObjectName]").find("option:selected").val());
            //        connectorConfig.dbSchema = $('select[name=dbSchema]').val();
            //        connectorConfig.sourceObjectName = $('[name=ETName]').val();
            //        loadSourceObjectColumns(connectorConfig);
            //    }

            //});
            if ($('[name=fuzzy_ratio]').val() == "") {
                $('[name=fuzzy_ratio]').val(100);
            }
            else {
                var fuzzyratiovalue = $('[name=fuzzy_ratio]').val()

                $('[name=fuzzy_ratio]').val(fuzzyratiovalue * 100);
                //$('[name=fuzzy_ratio]').attr("disabled", "disabled");
            }
            var regex = /^\d*[.]?\d*$/;

            $('[name=fuzzy_ratio]').on("input", function () {
                // Get input value
                var inputVal = $(this).val();

                // Test input value against regular expression
                if (regex.test(inputVal)) {
                    $(this).val();
                } else {
                    $(this).val("");
                    $('#fuzzyratio_errormsg').html("");
                }
            });
            $("#fuzzy_comparebox").keyup(function () {

                var maxratio = $('[name=fuzzy_ratio]').attr('data-val-range-max');

                if ($('[name=fuzzy_ratio]').val() > 100) {

                    $('#fuzzyratio_errormsg').html('Percentage value should be from 0 to 100');
                }

                else if ($('[name=fuzzy_ratio]').val() == "") {
                    $('#fuzzyratio_errormsg').html("");
                }

                else if ($('[name=fuzzy_ratio]').val() < 0)
                {
                    $('#fuzzyratio_errormsg').html('Percentage value should be from 0 to 100');

                }

                else {
                    $('#fuzzyratio_errormsg').html("");
                }

            });

            $("input[type=radio][name=scheduleType]").on("change", function (e) {
                connectorConfig.scheduleType = $(this).val();
                var customSyncContainer = $("div[name=custom_sync_container]");
                if (connectorConfig.scheduleType == "@ScheduleType.CUSTOM.ToString()") {
                    customSyncContainer.show();
                }
                else {
                    customSyncContainer.hide();
                }

                customSyncContainer.find("input").each(function () {
                    if ($(this).is(":visible")) {
                        $(this).prop("disabled", false).rules('add', {
                            required: true
                        });
                    }
                    else {
                        $(this).prop("disabled", true);
                    }
                });
            });

            $("input[type=radio][name=dedup_type]").on("change", function (e) {
                if("@DedupType.Full_Dedup"==$(this).val())
                {
                    $("#syncDestination").prop("disabled",true);
                    $("#destDBConfig_syncDefaultDatabaseUrl").prop("disabled",true);
                    $("#destDBSchema").prop("disabled",true);
                    $("#destObjectName").prop("disabled",true);
                    $("#destionationDb").hide();
                       if ($("[name=isScheduleAllow]").val() == "True") {
                           $("input[name=scheduleType]").prop("disabled", false);
                           $("input[name=scheduleType]").closest("label").removeClass("kt-radio--disabled");
                    }
                    $("#Execution_ModeText").text("@HeadingsAndMessage.DEDUP_EXECUTION_MODE_DEDUP");
                    $("#SimulateCountSection").hide();
                    $("#SimulationCountText").hide();
                }
                else
                {
                    $("input[name=scheduleType]").prop("disabled", true);
                    $("input[name=scheduleType]").closest("label").addClass("kt-radio--disabled");
					//loadDestinationByMainSource();
                    $("#destionationDb").show();
                    $("#syncDestination").prop("disabled",false);
                    $("#destDBConfig_syncDefaultDatabaseUrl").prop("disabled",false);
                    $("#destDBSchema").prop("disabled",false);
                    $("#destObjectName").prop("disabled", false);
                    document.getElementById("syncDestination").selectedIndex = 0;
                    $("#destObjectName").val("");
                    $("div[data-syncDestination='Database']").hide();
                    $("#Execution_ModeText").text("@HeadingsAndMessage.DEDUP_EXECUTION_MODE_SIMULATE");
                    $("#SimulateCountSection").show();
                    $("#SimulationCountText").show();
                }
            });

            $('[name=btnCancel]').click(function (e) {
                e.preventDefault();
                location.href = '/';
            });

            $('[name=getDBUrl]').click(function (e) {
                e.preventDefault();
                var inputTag = $(this).closest(".row").find(".form-control");
                showMask();
                $.post("/config/getconfigvar", { name: "DATABASE_URL" }, function (response) {
                    if (response.value && inputTag) {
                        inputTag[0].value = response.value;
                    }
                    else {
                        Swal.fire('', "DATABASE_URL is not added.", 'error');
						//showAlert("DATABASE_URL is not added.", "Error");
                    }
                }, 'json').always(function () {
                    hideMask();
                });
            });

            $('[name=getDefaultTable]').click(function (e) {
                e.preventDefault();
                var dataExtensions = $("select[id=sourceObjectName]");
                if (dataExtensions.valid()) {
                    var inputTag = $(this).closest(".row").find(".form-control");
                    if (inputTag) {
                        inputTag.val('deduped_'+$('[name=ETName]').val());
                    }
                }
            });

            $("a[name=edit],a[name=db_edit],a[name=compare_db_edit]").on("click", function (e) {
                e.preventDefault();
                var elements, evtTag = $(this);
                var tagTxt = evtTag.html();

                if (evtTag.attr('name') == "edit") {
                    elements = evtTag.closest(".row").find(".form-control");
                    //if ($(elements).val().trim() != "") {
                    if (tagTxt == "Edit") {
                        $(elements).removeAttr("readonly");
                    }
                    else {
                        if ($(elements).data("val") != undefined && $(elements).data("val") != true && $(elements).data("val") != $(elements).val()) {
                            $(elements).val($(elements).data("val"));
                            $(elements).valid();
                        }
                        $(elements).attr("readonly", "readonly");
                    }
                    //}
                    evtTag.html((tagTxt == "Edit" ? "Cancel" : "Edit"));
                    evtTag.attr("title",(tagTxt == "Edit" ? "Cancel" : "Edit"))
                }
                else {
                    elements = evtTag.closest(".form-group").find(".form-control");
                    elements.each(function () {
                        //if ($(this).val().trim() != "") {
                        if (tagTxt == "Edit") {
                            if($(this).attr("name") != "destObjectName"){
                                $(this).removeAttr("readonly").attr("data-reset", "true");
                                //$(this).focus();
                            }
                        }
                        else if ($(this).attr("name") != "destObjectName") {
                            if(evtTag.attr('name')=="db_edit"){
                                if($(this).attr("name").indexOf("dbConfig")==0){
                                    if (connectorConfig.dbConfig[$(this).attr("name").replace("dbConfig.","")] != undefined && connectorConfig.dbConfig[$(this).attr("name").replace("dbConfig.","")] != $(this).val()) {
                                        $(this).val(connectorConfig.dbConfig[$(this).attr("name").replace("dbConfig.","")]);
                                        $(this).valid();
                                    }
                                }
                                else if($(this).attr("name").indexOf("destDBConfig")==0){
                                    if (connectorConfig.destDBConfig[$(this).attr("name").replace("destDBConfig.","")] != undefined && connectorConfig.destDBConfig[$(this).attr("name").replace("destDBConfig.","")] != $(this).val()) {
                                        $(this).val(connectorConfig.destDBConfig[$(this).attr("name").replace("destDBConfig.","")]);
                                        $(this).valid();
                                    }
                                }
                            }
                            $(this).attr("readonly", "readonly");
                        }
                        //}
                    });

                    evtTag.html((tagTxt == "Edit" ? "Cancel" : "Edit"));
                    evtTag.attr("title",(tagTxt == "Edit" ? "Cancel" : "Edit"))
                }
            });

            $("a[name=src_db_save]").on("click", function (e) {
                e.preventDefault();
                var inputTag = $(this).closest(".row").find(".form-control");
                var editTag = $(this).closest(".row").find("a[name=edit]");
                if ($.trim(inputTag.val()).length == 0) {
                    inputTag.valid();
                    return;
                }
                if ($("input[name=dedupSourceType]:checked").val() == "@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" ||
                    $("input[name=dedupSourceType]:checked").val() == "@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination") {
                   enableDisableCompareTable(connectorConfig);
                }
               $("#divCompareFieldContainer").hide();
               if($("input[name=dedupSourceType]:checked").val()!="@SourceType.Remove_Duplicates_from_a_Single_Table" && $("input[name=dedupSourceType]:checked").val()!=""){
                        $("#dbconfig_compare").show();
                        $("#dbconfig_compare").attr("style","pointer-events:none");
                    }
                connectorConfig["dbConfig"]["databaseType"]=$('select[name=dataSource]').val();
                connectorConfig["dbConfig"][inputTag.attr("name").replace("dbConfig.","")]=$.trim(inputTag.val());
                editTag.click();
                $("select[name='dataSource']").trigger('change');
            });


            $("a[name=dest_db_save]").on("click", function (e) {
                e.preventDefault();
                var inputTag = $(this).closest(".row").find(".form-control");
                var editTag = $(this).closest(".row").find("a[name=edit]");
                if ($.trim(inputTag.val()).length == 0) {
                    inputTag.valid();
                    return;
                }

                connectorConfig["destDBConfig"]["databaseType"]=$("select[name='syncDestination']").val();
                connectorConfig["destDBConfig"][inputTag.attr("name").replace("destDBConfig.","")]=$.trim(inputTag.val());
                editTag.click();

                //$("[name='syncDestination']").trigger('change');
                loadDestFolders(connectorConfig)
            });

            //16-Nov-2018
            $("a[name=compare_db_save]").on("click", function (e) {
                e.preventDefault();

                var funName=arguments.callee.name;
                var inputTag = $(this).closest(".row").find(".form-control");
                var editTag = $(this).closest(".row").find("a[name=compare_db_edit]");
                if ($.trim(inputTag.val()).length == 0) {
                    inputTag.valid();
                    return;
                }

                //connectorConfig["dbConfig"]["databaseType"]=$('select[name=dataSource]').val();
                if(connectorConfig.isNew){
                    connectorConfig["dbConfig_compare"]["db_schema"]=""
                    connectorConfig["dbConfig_compare"]["object_name"]="";
                      $("#divCompareFieldContainer").hide();
                      $("#dbConfig_compare_object_name")[0].selectedIndex = 0;
                      $("#dbConfig_compare_db_schema")[0].selectedIndex = 0;
                }
                editTag.click();
                showMask();
                //syncDefaultDatabaseUrl
                connectorConfig["dbConfig_compare"][inputTag.attr("name").replace("dbConfig_compare.","")]=$.trim(inputTag.val());
                $.post(controllerPath + 'getdestnamespaces/', { syncDestination: connectorConfig.dbConfig_compare.dataSource, dbConfig: connectorConfig.dbConfig_compare }, function (response) {
                    var selectedVal = '', compareSourceNameSpaces = [];
                    dataSourceTables = response;
                    ddlNameSpace = $("div[data-dbConfig_compare]").find("select[name='dbConfig_compare.db_schema']");
                    ddlNameSpace.empty().append($('<option></option>').val('').text('Please select a data source schema'));

                    //funName
                    if (dataSourceTables && dataSourceTables.length > 0) {
                        $.DEDUPProcess.sortByProperty(dataSourceTables, "dbSchema", false, true);
                        $.each(dataSourceTables, function (index, item) {
                            if (compareSourceNameSpaces.indexOf(item.dbSchema) == -1) {
                                compareSourceNameSpaces.push(item.dbSchema);
                                ddlNameSpace.append($('<option></option>').val(item.dbSchema).text(item.dbSchema));
                            }
                        });

                        selectedVal = connectorConfig["dbConfig_compare"]["db_schema"] || "";
                        var matchingValue = getDropdownValue(ddlNameSpace, selectedVal);
                        if (ddlNameSpace && matchingValue.length > 0) {
                            ddlNameSpace.val(matchingValue);
                        }

                        var defSchema = ddlNameSpace.val() == "" ? (connectorConfig.dataSource == "@ConnectorType.Azure_SQL" ? $("[name=gbl_sqldbschema]").val() : $("[name=gbl_dbschema]").val()) : selectedVal;
                        ddlNameSpace.find("option:contains('" + defSchema + "')").each(function () {
                            if ($(this).html() == defSchema) {

                                connectorConfig["dbConfig_compare"]["db_schema"] = $(this).val();
                                $(this).attr('selected', 'selected');
                                return false;
                            }
                        });
                        $("div[data-dbconfig_compare] select[name='dbConfig_compare.db_schema']").trigger('change');
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    console.log("error " + textStatus);
                    console.log("incoming Text " + jqXHR.responseText);
                    if ((jqXHR.status == 500 || jqXHR.status == 401)) {
                        Swal.fire('', "Not able to load database schemas due to some error.", 'error');
                        //showAlert('Not able to load database schemas due to some error.', "Error");
                    }
                }).always(function () {
                    busyLoaderStatus.remove(funName);
                    if(busyLoaderStatus.length==0)
                    {
                        hideMask();
                    }
                });
            });


            $("a[name=syncTargetSave]").on("click", function (e) {
                e.preventDefault();
                var textBox = $(this).closest(".row").find("input[type=text]");
                var editTag = $(this).closest(".row").find("a[name=edit]");
                if ($.trim(textBox.val()).length == 0) {
                    textBox.valid();
                    return;
                }
                showMask();
                $.post(controllerPath + "synctableaddedit", {
                    ccid: connectorConfig.ccid,
                    connectorId: connectorConfig.id,
                    fieldName: textBox[0].name,
                    fieldValue: textBox[0].value
                },
                function (data, status) {
                    console.log(data);
                    if (data.status) {
                        if (data.status == 200 && textBox.length > 0) {
                            Swal.fire('', textBox[0].name + " has saved successfully.", 'error');
							//showAlert(textBox[0].name + " has saved successfully.", "Info");
                            $(editTag).click();
                        }
                        else {
                            var msg = data.message ? data.message : textBox[0].name + " has not saved.";
                            Swal.fire('', msg, 'error');
							//showAlert(msg, "Error");
                        }
                    }
                }).fail(function (error, status) {
                    console.log(error);
                }).always(function () {
                    hideMask();
                });
            });

            $("select[name=sourceObjectName]").on("change", function () {
                if ($("input[name=dedupSourceType]:checked").val() == "@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" ||
                    $("input[name=dedupSourceType]:checked").val() == "@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination") {
                   enableDisableCompareTable(connectorConfig);
                   EnableCompareDetails();
                }
                if($("input[name=dedupSourceType]:checked").val())
                {
                    var divCheckBoxList = $("#divCompareCheckBoxList");
                    divCheckBoxList.empty();
                    $("#lblMessage").html('');
                    $('[name=ETName]').val('');
                    connectorConfig.dataFields = '';
                    connectorConfig.customerKey = '';
                    if ($(this).find("option:selected").val().length > 0) {
                        $('[name=ETName]').val($(this).val());
                        connectorConfig.dbSchema = $('select[name=dbSchema]').val();
                        connectorConfig.sourceObjectName = $('[name=ETName]').val();
                        loadSourceObjectColumns(connectorConfig);
                    }
                    else {
                        $("#divFieldContainer").hide();
                        //$("#dbconfig_compare").hide();

                        connectorConfig.dbSchema = $('select[name=dbSchema]').val();
                        connectorConfig.sourceObjectName = $('[name=ETName]').val();
                    }
                    //destinationChanged();
					//loadDestinationByMainSource();
                }
                else
                {
                    Swal.fire('', "Please select the DeDup source type.", 'error');
                    //showAlert("Please select the dedup source type.", "Error");
                }
            });

            $("select[name='dbConfig_compare.object_name']").on("change", function () {
                $("#lblMessage").html('');
                var funName=arguments.callee.name;
                connectorConfig.dataFields = '';
                connectorConfig.customerKey = '';
                if ($(this).find("option:selected").val().length > 0) {
                    connectorConfig.dbConfig_compare.db_schema = $("select[name='dbConfig_compare.db_schema']").val();
                    connectorConfig.dbConfig_compare.object_name = $(this).val();
                    connectorConfig.dbConfig_compare.dataSource =$("select[name='dbConfig_compare.dataSource']").val()
                    connectorConfig.dbConfig_compare.syncDefaultDatabaseUrl =$("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").val()
                    //loadSourceObjectColumns(connectorConfig)
                    loadCompareSourceObjectColumns(connectorConfig);
                }
                else {
                    connectorConfig.dbConfig_compare.object_name = $(this).val();
                }
                //destinationChanged();
				//loadDestinationByMainSource();
            });

            $("[name=btnSaveConnector]").on("click", function (e) {
                connectorConfig.dbConfig={};
                connectorConfig.destDBConfig={};
                connectorConfig.dbConfig_compare={};
                var compareObjectFields = [];
                //var SelectedTabletype= $("input[type=radio][name=dedupTableType]:checked").val();
                var isNewTableChecked,SelectedTabletype;
                if ("@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination"==$("input[name=dedupSourceType]:checked").val()) {
                    isNewTableChecked = true;
                    SelectedTabletype = 0;
                }
                else {
                    isNewTableChecked = false;
                     SelectedTabletype = 1;
                }
                var selectedFields = $('[name=sourceObjectFields]:checked');
                if("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B"==$("input[name=dedupSourceType]:checked").val() && !isNewTableChecked)
                {
                    compareObjectFields = $('[name=compareObjectFieldsMapping]:checked');
                }
                if (isNewTableChecked) {
                    compareObjectFields = selectedFields;
                }
                var conConfig = { dataSource:$('select[name=dataSource]').val(), syncDestination:$('select[name="syncDestination"]').val()};
                $("#lblMessage").html('');
                $("div[data-dataSource]").hide();
                $("select[name='syncDestination'] option").show();
                if (conConfig.dataSource == '@DataSource.Heroku_Postgres'
                    || conConfig.dataSource == '@DataSource.Azure_Postgres'
                    || conConfig.dataSource == '@DataSource.AWS_Postgres'
                    || conConfig.dataSource == '@DataSource.Azure_SQL') {
                    $("div[data-dataSource='Database']").show();
                    //$("select[name='syncDestination'] option[value*='Postgres'],select[name='syncDestination'] option[value*='SQL']").hide();
                }
                else{
                    $("div[data-dataSource='" + conConfig.dataSource + "']").show();
                    //$("select[name='syncDestination'] option[value='" + conConfig.dataSource + "']").hide();
                }
                $("div[data-dataSource]").each(function () {
                    $(this).find("input,textarea,select").each(function () {
                        if ($(this).is(":visible")) {
                            $(this).prop("disabled", false).rules('add', {
                                required: true
                            });
                        }
                        else {
                            $(this).prop("disabled", true);
                        }
                    });
                });

                $("div[data-syncDestination]").hide();
                if (conConfig.syncDestination == '@ConnectorType.Heroku_Postgres'
                    || conConfig.syncDestination == '@ConnectorType.Azure_Postgres'
                    || conConfig.syncDestination == '@ConnectorType.AWS_Postgres'
                    || conConfig.syncDestination == '@ConnectorType.Azure_SQL'){
                    $("div[data-syncDestination='Database']").show();
                }
                else{
                    $("div[data-syncDestination='" + conConfig.syncDestination + "']").show();
                }
                $("div[data-syncDestination]").each(function () {
                    $(this).find("input,textarea,select").each(function () {
                        if ($(this).is(":visible")) {
                            $(this).prop("disabled", false).rules('add', {
                                required: true
                            });
                        }
                        else {
                            $(this).prop("disabled", true);
                        }
                    });
                });

                if ($('[name=scheduleType]:checked').val() != "@ScheduleType.CUSTOM") {
                    $("input[name='customScheduleInMinutes']").prop("disabled", true);
                }
                if (!$('form').valid()) {
                   Swal.fire('', "Please enter the valid details for all required fields .", 'error');
                    $("#div_form-opacity").scrollTop();
                    return;
                }
                if (!$('form').valid() || selectedFields.length == 0 || compareObjectFields.length==0) {
                    if (selectedFields.length == 0) {
                        $("[name=sourceObjectFields]").closest('.form-group').addClass('has-error');
                        $("span.field-validation-valid[data-valmsg-for=sourceObjectFields]").addClass('help-block')
                            .html($("[name=sourceObjectFields]:first").attr("data-val-required"));
                    }
                    if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" == $("input[name=dedupSourceType]:checked").val() ||
                        "@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination"==$("input[name=dedupSourceType]:checked").val())
                    {
                        if (compareObjectFields.length == 0 && !isNewTableChecked) {
                            $("[name=compareObjectFieldsMapping]").closest('.form-group').addClass('has-error');
                            $("span.field-validation-valid[data-valmsg-for=compareObjectFieldsMapping]").addClass('help-block')
                                .html($("[name=compareObjectFieldsMapping]:first").attr("data-val-required"));
                            return;
                        }
                    }
                }
                if (isNewTableChecked) {
                     if ($.trim($("#dbConfig_compare_new_table_name").val())=="" ||$("#dbConfig_compare_new_table_name").val()==undefined) {
                            $("[id=dbConfig_compare_new_table_name]").closest('.form-group').addClass('has-error');
                            $("span.field-validation-valid[data-valmsg-for=dbConfig_compare_new_table_name]").addClass('help-block')
                                .html($("[name=dbConfig_compare_new_table_name]:first").attr("data-val-required"));
                            return;
                        }
                }
                if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" == $("input[name=dedupSourceType]:checked").val() && compareObjectFields.length != selectedFields.length && !isNewTableChecked)
                {
                   Swal.fire('', "Due to some network issue filter column not selected properly from source coulmn and compare column.Can you please select the column again?.", 'error');
                    $("[name=compareObjectFieldsMapping]").scrollTop();
                    return;
                }
                if (selectedFields.length > 0) {
                    showMask(true);
                    var dataColumns = [];
                    var dataFields = selectedFields.map(function () {
                        dataColumns.push({
                            name: this.value, fieldType: this.getAttribute('data-fieldType'), isPrimaryKey: this.getAttribute('data-isPrimaryKey'),
                            isNotNull: this.getAttribute('data-isRequired'), defaultValue: this.getAttribute('data-defaultValue'),
                            maxLength: this.getAttribute('data-maxLength'), precision: this.getAttribute('data-precision')
                        });
                        return this.value;
                    }).get();

                    var compareDataFieldsMapping={};
                    var compareSrcObjectFields;
                    if("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B"==$("input[name=dedupSourceType]:checked").val())
                    {
                        var compareDataColumns = [];
                        var compareDataFields = compareObjectFields.map(function () {
                            compareDataColumns.push({
                                name: this.value, fieldType: this.getAttribute('data-fieldType'), isPrimaryKey: this.getAttribute('data-isPrimaryKey'),
                                isNotNull: this.getAttribute('data-isRequired'), defaultValue: this.getAttribute('data-defaultValue'),
                                maxLength: this.getAttribute('data-maxLength'), precision: this.getAttribute('data-precision')
                            });
                            return this.value;
                        }).get();
                        if (isNewTableChecked)
                        {
                              compareObjectFields.each(function () {
                                  compareDataFieldsMapping[$(this).val()] = $(this).val();
                              });
                        }
                        else
                          {
                              compareObjectFields.each(function () {
                                  compareDataFieldsMapping[$(this).attr("data-source1-column")] = $(this).val();
                              });
                          }

                        compareSrcObjectFields = compareDataFields;
                    }
                    if ($("input[name=simulationCount]:checked").val() == "Entiretable")
                    {
                     conConfig.simulation_count = -1;
                    }
                    else
                    {
                     conConfig.simulation_count = $("#simulation_count").val();
                    }

                    conConfig.ccid = $('[name=ETuuid]').val();
                    conConfig.connectorId = (connectorConfig.id==0 ? null : connectorConfig.id);
                    conConfig.connectorName = $('[name=connectorName]').val();
                    conConfig.sourceObjectName = $('[name=ETName]').val();
                    conConfig.customerKey = $('[name=ETKey]').val();
                    conConfig.sourceObjectFields = dataFields;
                    conConfig.syncObjectColumns = dataColumns;
                    conConfig.compareObjectFieldsMapping = dataFields;// compareDataFieldsMapping;
                    conConfig.destObjectName = $('[name=destObjectName]:visible').val();
                    conConfig.scheduleType = $('[name=scheduleType]:checked').val();
                    conConfig.copyToCloudStorage = ($('[name=copyToCloudStorage]:checked').length == 0 ? false : true);
                    conConfig.SyncStatus = $("#htnSyncStatus").val();
                    conConfig.twoWaySyncPriority = $('[name="twoWaySyncPriority"]').val();
                    conConfig.srcNewRecordFilter = $('[name="srcNewRecordFilter"]').val();
                    conConfig.srcUpdateRecordFilter = $('[name="srcUpdateRecordFilter"]').val();
                    conConfig.dbSchema = $('select[name=dbSchema]').val();
                    conConfig.destDBSchema = $('select[name=destDBSchema]').val();
                    conConfig.customScheduleInMinutes = 0;
                    conConfig.dedupSourceType=$("input[name=dedupSourceType]:checked").val();
                    conConfig.dedup_type=$("input[name=dedup_type]:checked").val();
                    conConfig.backup_before_delete=$('input[name=archiveRecords]:checked').val();
                    conConfig.review_before_delete=$('input[name=reviewBefore]:checked').val();
                    conConfig.dedup_method = $('input[name=methodType]:checked').val();
                    conConfig.fuzzy_ratio = ($('[name=fuzzy_ratio]').val()) / 100;
                    if (conConfig.scheduleType == "@ScheduleType.CUSTOM") {
                        conConfig.customScheduleInMinutes = $('[name=customScheduleInMinutes]').val();
                    }
                    //if (conConfig.dedup_method == "Fuzzy_Compare") {
                    //    conConfig.fuzzy_ratio = $('[name=fuzzy_ratio]').val();
                    //}
                    if (conConfig.dataSource == "@DataSource.Heroku_Postgres"
                        || conConfig.dataSource == "@DataSource.Azure_Postgres"
                        || conConfig.dataSource == "@DataSource.AWS_Postgres"
                        || conConfig.dataSource == "@DataSource.Azure_SQL") {
                        conConfig.dbConfig = {
                            syncDefaultDatabaseUrl: $("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val(),
                            databaseType: conConfig.dataSource
                        };
                        if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" == $("input[name=dedupSourceType]:checked").val() ||
                            "@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination"==$("input[name=dedupSourceType]:checked").val())
                        {
                            conConfig.dbConfig_compare = {
                                syncDefaultDatabaseUrl: $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").val(),
                                dataSource: $("select[name='dbConfig_compare.dataSource']").val(),
                                databaseType: $("select[name='dbConfig_compare.dataSource']").val(),
                                object_name:!isNewTableChecked?$("select[name='dbConfig_compare.object_name']").val():"",
                                new_table_name:isNewTableChecked?$("#dbConfig_compare_new_table_name").val():"",
                                table_type:SelectedTabletype,
                                db_schema: $("select[name='dbConfig_compare.db_schema']").val(),
                                compareObjectFields: compareSrcObjectFields
                            };
                        }
                    }

                    if (conConfig.syncDestination == "@ConnectorType.Heroku_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.Azure_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.AWS_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.Azure_SQL") {
                        conConfig.destDBConfig = {
                            syncDefaultDatabaseUrl: $("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").val(),
                            databaseType: conConfig.syncDestination
                        };
                    }

                    if (connectorConfig.id > 0 && connectorConfig.dedup_type == '@DedupType.Full_Dedup') {
                         saveConnector(conConfig);
                    }
                    else if (connectorConfig.id > 0 && $('[name=destObjName]').val() == conConfig.destObjectName) {
                             saveConnector(conConfig);
                    }
                    //else if (conConfig.dedup_method == "Fuzzy_Compare" && $("#fuzzyratio_errormsg").html() != "") {
                    //    hideMask();

                    //}
                    else if ($('[name=fuzzy_ratio]').val()  == "") {
                        hideMask();

                    }
                    else {
                        var funName=arguments.callee.name;
                        busyLoaderStatus.push(funName);
                        $.post(controllerPath + 'synctableisexist', conConfig, function (response) {
                            console.log(response);
                            if (response.value && response.value > 0) {
                                Swal.fire('', "The " + conConfig.destObjectName + " table already exists, Please try with some other name.", 'error');
                            }
                            else {
                                if (connectorConfig.id < 1 && isNewTableChecked) {
                                    $.post(controllerPath + 'syncgoldentableisexist', conConfig, function (response) {
                                        if (response.value && response.value > 0) {
                                            Swal.fire('', "The " + conConfig.dbConfig_compare.new_table_name + " table already exists, Please try with some other name.", 'error');
                                        }
                                        else {
                                             saveConnector(conConfig);
                                        }
                                    }).fail(function (jqXHR, textStatus, errorThrown) {
                                        console.log("error " + textStatus);
                                        console.log("incoming Text " + jqXHR.responseText);
                                        if ((jqXHR.status == 500 || jqXHR.status == 401)) {
                                            Swal.fire('', "Not able to save DeDup, Please try again.", 'error');
                                        }
                                    }).always(function () {
                                        busyLoaderStatus.remove(funName);
                                        if (busyLoaderStatus.length == 0) {
                                            hideMask();
                                        }
                                    });
                                }
                                else {
                                    saveConnector(conConfig);
                                }
                            }
                        }).fail(function (jqXHR, textStatus, errorThrown) {
                            console.log("error " + textStatus);
                            console.log("incoming Text " + jqXHR.responseText);
                            if ((jqXHR.status == 500 || jqXHR.status == 401)) {
                                  Swal.fire('', "Not able to save DeDup, Please try again.", 'error');
                            }
                        }).always(function () {
                            busyLoaderStatus.remove(funName);
                            if(busyLoaderStatus.length==0)
                            {
                                hideMask();
                            }
                        });
                    }
                }
            });

            $("input[name=destObjectName]").on("keyup", function () {
                var datasource = $('select[name="syncDestination"]').val();
                var DatabaseUrl= $("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").val();
                var schema = $('select[name=destDBSchema]').val();
                var tablename = $('[name=destObjectName]:visible').val();
                var URL = controllerPath + 'getdatasourceobjectslistbychar?datasource=' + datasource + '&dbURL=' + DatabaseUrl + '&schema=' + schema + '&tablename=' + tablename;
                $("input[name=destObjectName]").attr("autocomplete","on");
                $("input[name=destObjectName]").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            type: "GET",
                            contentType: "application/json; charset=utf-8",
                            url: URL,
                            dataType: "json",
                            success: function (data) {
                                response(data);
                                //if ((data.indexOf(tablename) > -1)) {
                                //    Swal.fire('', "You cannot use the existing table name.", 'error');
                                //    $('[name=destObjectName]:visible').val('');
                                //}
                                //else {
                                //  response(data);
                                //}
                            },
                            error: function (result) {
                                // alert("No Match");
                            }
                        });
                    }
                    //    var dfd = $.Deferred();
                    //    $.post(controllerPath + 'getdatasourceobjectslistbychar/', { dataSource: connectorConfig.syncDestination, dbConfig: connectorConfig.destDBConfig,async:false}, function (data) {
                    //        if (data && data.length > 0) {
                    //            response(data);
                    //            //dfd.resolve(response);
                    //           // dfd.promise();
                    //        }
                    //    }).fail(function (jqXHR, textStatus, errorThrown) {
                    //        console.log("error " + textStatus);
                    //        console.log("incoming Text " + jqXHR.responseText);
                    //    }).always(function () {
                    //        if (busyLoaderStatus.length == 0) {
                    //            hideMask();
                    //        }
                    //    });
                    //},
                    // minLength: 1
				});
            })

            $("input[name=simulationCount]").on("click", function () {
                if ($("input[name=simulationCount]:checked").val().toLowerCase() == "entiretable") {
                    $("#simulation_count").hide();
                    $("#simulation_count").val('');
                }
                else {
                    $("#simulation_count").show();
                    $("#simulation_count").val('10000');
                }
            });
            $("input[name=dedupSourceType]").on("click", function () {
                $("span[data-valmsg-for='dataSource']").html('');
                $("span[data-valmsg-for='sourceObjectName']").html('');
                $("span[data-valmsg-for='syncDestination']").html('');
                $("#connectorName-error").html('');
                if($("input[name=dedupSourceType]:checked").val()=="@SourceType.Remove_Duplicates_from_a_Single_Table")
                {
                $("#source_title").text("@HeadingsAndMessage.DEDUP_SOURCE_DATABASE_INFO");

	            $("#dedupSyncFilter").hide();
                    $("#dedupType-class").attr("class", "kt-radio-inline");
                    $("#Safe_Mode").hide();
                    $("#tooltip_single").show();
                    $("#tooltip_multiple").hide();
                    $("#mainsource").attr("class", "col-lg-10");
                    $("#dbConfig_compare_syncDefaultDatabaseUrl").val('');
                    $("#dbconfig_compare").hide();
                    $("#divCompareCheckBoxList").hide();
                    $("#divCompareFieldContainer").hide();

                    // window.location.reload();
                }
                else if($("input[name=dedupSourceType]:checked").val()=="@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination")
                {
                   $("#source_title").text("@HeadingsAndMessage.DEDUP_SOURCE_DATABASE_INFO");

                    $("#compareHeadingName").text(unescape("@HeadingsAndMessage.DEDUP_COMPARE_TABLE_HEADING_1"));
                    $("#dbconfig_compare").show();
                    $("div[data-table-compare=CompareObjectname]").hide();
                    $("div[id=divCompareFieldContainer]").hide();
                    $("div[data-new-table-compare=CompareNewObjectname]").show();;

                }
                else {
                    $("#source_title").text("@HeadingsAndMessage.DEDUP_SOURCE_DATABASE_INFO2");

                    $("#compareHeadingName").text(unescape("@HeadingsAndMessage.DEDUP_COMPARE_TABLE_HEADING_2"));
                    $("div[data-table-compare=CompareObjectname]").show();
                    $("div[data-new-table-compare=CompareNewObjectname]").hide();
                }
                if ($("input[name=dedupSourceType]:checked").val() == "@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" ||
                    $("input[name=dedupSourceType]:checked").val() == "@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination") {
                    $("#dedupSyncFilter").show();
		            $("#dedupType-class").attr("class", "kt-radio-inline");
                    $("#mainsource").attr("class", "col-lg-6");
                    // $("#Safe_Mode").show();
                    $("#dbconfig_compare").show();
                    //$("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=db_compare_action_container]").hide();
                    $("#dbconfig_compare").removeAttr("pointer-events");
                    $("#Safe_Mode").hide();
                    $("#tooltip_single").hide();
                    $("#tooltip_multiple").show();
                    if (isCompareEnabled) {
                       $("select[name='dataSource']")[0].selectedIndex = 0;
                       $("select[name='dataSource']").trigger('change');
                    }
                }
            });

            $("select[name='syncDestination']").on("change", function () {
                if (connectorConfig.dedup_type == '@DedupType.Full_Dedup' && $("input[name=dedup_type]:checked").val()== '@DedupType.Full_Dedup') {
                    connectorConfig.syncDestination = "";
                    return;
                }
                connectorConfig.syncDestination = $(this).val();
                $("#destDBConfig_syncDefaultDatabaseUrl-error").html('');
                destinationChanged();
                switch (connectorConfig.syncDestination) {
                    case "@ConnectorType.Heroku_Postgres":
                    case "@ConnectorType.Azure_Postgres":
                    case "@ConnectorType.AWS_Postgres":
                    case "@ConnectorType.Azure_SQL":
                        setTitleByDBType("destDBConfig", connectorConfig.syncDestination);
                        if (connectorConfig.isNew && connectorConfig["destDBConfig"]["databaseType"] != connectorConfig.syncDestination){
                            connectorConfig["destDBConfig"]["databaseType"] = connectorConfig.syncDestination;
                            connectorConfig["destDBConfig"]["syncDefaultDatabaseUrl"] ="";
                        }

                        if ($("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").length > 0) {
                            if ($("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").val().trim().length == 0) {
                                $("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").removeAttr("readonly").val("");
                                getDBConfig(connectorConfig.syncDestination).done(function (destDBConfig) {
                                    if (destDBConfig) {
                                        Object.keys(destDBConfig).filter(function (key) {
                                            if ($("[name='destDBConfig." + key + "']:visible")) {
                                                if (destDBConfig[key]) {
                                                    $("[name='destDBConfig." + key + "']:visible").removeAttr("readonly").val(destDBConfig[key]);
                                                }
                                                else {
                                                    $("[name='destDBConfig." + key + "']:visible").removeAttr("readonly").val("");
                                                }
                                            }
                                        });
                                    }

                                    if (connectorConfig["destDBConfig"]["syncDefaultDatabaseUrl"] == "") {
                                        $("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=dest_action_container] table td a").each(function () {
                                            $(this).closest("td").hide();
                                            if ("@ConnectorType.Heroku_Postgres" == connectorConfig.syncDestination && $(this).attr("name") == "getDBUrl") {
                                                $(this).closest("td").show();
                                            }
                                            else if ($(this).attr("name") != "getDBUrl") {
                                                $(this).closest("td").show();
                                                if ($(this).attr("name") == "db_edit" && connectorConfig["destDBConfig"]["syncDefaultDatabaseUrl"] == "") {
                                                    $(this).closest("td").hide();
                                                }
                                            }
                                        });
                                        connectorConfig["destDBConfig"]["syncDefaultDatabaseUrl"] = $.trim($("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").val());
                                        $("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=dest_action_container]").show();
                                    }

                                    loadDestFolders(connectorConfig);
                                }).fail(function () {
                                    $("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").val("");
                                    //setDefaultElmValues();
                                });
                            }
                            else {
                                $("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").removeAttr("readonly");
                                connectorConfig["destDBConfig"]["syncDefaultDatabaseUrl"] = $("[name='destDBConfig.syncDefaultDatabaseUrl']:visible").val().trim();
                                loadDestFolders(connectorConfig);
                            }
                        }
                         break;
                     default:
                        // setDefaultElmValues();
                         break;
                }
            });

            $("select[name='dataSource']").on("change", function () {
                if(connectorConfig.isNew)
                {
                    connectorConfig["syncDestination"] = "";
                    connectorConfig["destDBConfig"]={};
                    connectorConfig["destDBSchema"] = "";
                    connectorConfig["sourceObjectName"] = "";
                }
                connectorConfig["dataSource"] = $(this).val();
                $("#dbConfig_syncDefaultDatabaseUrl-error").html('');
                if ($("input[name=dedupSourceType]:checked").val() == "@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" ||
                    $("input[name=dedupSourceType]:checked").val() == "@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination") {
                   enableDisableCompareTable(connectorConfig);
                }

                dataSourceChanged();

                switch (connectorConfig.dataSource) {
                    case "@DataSource.Heroku_Postgres":
                    case "@DataSource.Azure_Postgres":
                    case "@DataSource.AWS_Postgres":
                    case "@DataSource.Azure_SQL":
                        setTitleByDBType("dbConfig",connectorConfig.dataSource);
                        if(connectorConfig.isNew && connectorConfig["dbConfig"]["databaseType"]!=connectorConfig["dataSource"]){
                            connectorConfig["dbConfig"]["databaseType"]=connectorConfig["dataSource"];
                            connectorConfig["dbConfig"]["syncDefaultDatabaseUrl"] ="";
                        }
                        if(connectorConfig.isNew && $.trim(connectorConfig["dbConfig"]["syncDefaultDatabaseUrl"])==""){
                            $("div[name=db_action_container]").hide();
                            $("[name='dbConfig.syncDefaultDatabaseUrl']:visible").removeAttr("readonly").val("");
                            getDBConfig(connectorConfig["dataSource"]).done(function(dbConfig){
                                if(dbConfig){
                                    Object.keys(dbConfig).filter(function (key) {
                                        if($("[name='dbConfig." + key + "']:visible")){
                                            if(dbConfig[key]){
                                                $("[name='dbConfig." + key + "']:visible").attr("readonly","readonly").val(dbConfig[key]);
                                            }
                                            else{
                                                $("[name='dbConfig." + key + "']:visible").removeAttr("readonly").val("");
                                            }
                                        }
                                    });
                                }
                                connectorConfig["dbConfig"]["syncDefaultDatabaseUrl"] =$.trim($("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val());
                                if('True'=='True' || connectorConfig["dbConfig"]["syncDefaultDatabaseUrl"]==""){
                                    $("[name='dbConfig.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=db_action_container] table td a").each(function () {
                                        $(this).closest("td").hide();
                                        if ("@DataSource.Heroku_Postgres" == connectorConfig["dataSource"]) {
                                            $(this).closest("td").show();
                                        }
                                        else if ($(this).attr("name") != "getDBUrl") {
                                            $(this).closest("td").show();
                                        }
                                        if ($(this).attr("name") == "edit" && $.trim($(this).closest(".row").find(".form-control").val()) == "") {
                                            $(this).closest("td").hide();
                                        }
                                    });
                                    $("[name='dbConfig.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=db_action_container]").show();
                                }
                                if (connectorConfig["dbConfig"]["syncDefaultDatabaseUrl"] != "") {
                                    loadSourceNameSpaces(connectorConfig);
                                }
                                //else {
                                //   // loadDestinationByMainSource(connectorConfig);
                                //}
                            }).fail(function(){
                                $("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val("");
                                setDefaultElmValues();
                            });
                        }
                        else{
                            connectorConfig["dbConfig"]["syncDefaultDatabaseUrl"] =$.trim($("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val());
                            loadSourceNameSpaces(connectorConfig);
                            if(!connectorConfig.isNew){
                                connectorConfig["dbConfig_compare"]["syncDefaultDatabaseUrl"] =$.trim($("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").val());
                                $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").attr("readonly","readonly");
                            }
                        }
                        break;
                    default:
                        setDefaultElmValues();
                        break;
                }
            });

            $("div[data-dataSource] select[name='dbSchema']").on("change", function () {
                connectorConfig["syncDestination"] = "";
                connectorConfig["sourceObjectName"] = "";
                connectorConfig["destDBSchema"] = "";

                $("#divCheckBoxList").empty();
                $("#divFieldContainer").hide();
                if ($("input[name=dedupSourceType]:checked").val() == "@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" ||
                      $("input[name=dedupSourceType]:checked").val() == "@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination") {
                   enableDisableCompareTable(connectorConfig);
                }
                $("#divCompareFieldContainer").hide();
                $("[name=selectAll]").prop("checked", false);
                $("[name=customScheduleInMinutes]").val('');
                connectorConfig[$(this).attr("name")] = $(this).val();

                if (connectorConfig[$(this).attr("name")] != "") {
                    loadSourceObjects(connectorConfig,"sourceObjectName",1);
                }
                else{
                    $("select[id=sourceObjectName]").empty().append($('<option></option>').val('').text('Please select a data source object'));
                }
            });

            $("select[name='dbConfig_compare.dataSource']").on("change", function () {
                if (connectorConfig.isNew) {
                     isCompareEnabled = true;
                      $("#divCompareFieldContainer").hide();
                      $("#dbConfig_compare_object_name")[0].selectedIndex = 0;
                      $("#dbConfig_compare_db_schema")[0].selectedIndex = 0;
                      $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").val("");
                }

                connectorConfig["dbConfig_compare"]["dataSource"] = $(this).val();
                $("#dbConfig_compare_syncDefaultDatabaseUrl-error").html('');
                switch (connectorConfig["dbConfig_compare"]["dataSource"]) {
                    case "@DataSource.Heroku_Postgres":
                    case "@DataSource.Azure_Postgres":
                    case "@DataSource.AWS_Postgres":
                    case "@DataSource.Azure_SQL":
                        setTitleByDBType("dbConfig_compare",connectorConfig["dbConfig_compare"]["dataSource"]);
                        if(connectorConfig.isNew && connectorConfig["dbConfig_compare"]["databaseType"]!=connectorConfig["dbConfig_compare"]["dataSource"]){
                            connectorConfig["dbConfig_compare"]["databaseType"]=connectorConfig["dbConfig_compare"]["dataSource"];
                            connectorConfig["dbConfig_compare"]["syncDefaultDatabaseUrl"] ="";
                        }

                        if(connectorConfig["dataSource"]==connectorConfig["dbConfig_compare"]["dataSource"])
                        {
                            $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").val($.trim($("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val()));
                            $("#dbConfig_compare_syncDefaultDatabaseUrl-error").html("");
                            $("a[name=compare_db_save]").trigger("click");
                            $("div[name=db_compare_action_container]").show();
                            $("a[name=compare_db_save]").closest("td").show();
                            $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").removeAttr("readonly");
                        }
                        else{
                            if (connectorConfig.isNew && $.trim(connectorConfig["dbConfig_compare"]["syncDefaultDatabaseUrl"]) == "") {
                                $("div[name=db_compare_action_container]").hide();
                                $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").removeAttr("readonly").val("");
                                getDBConfig(connectorConfig["dbConfig_compare"]["dataSource"]).done(function (dbConfig) {
                                    if (dbConfig) {
                                        Object.keys(dbConfig).filter(function (key) {
                                            if ($("[name='dbConfig_compare." + key + "']:visible") && key != 'dataSource') {
                                                if (dbConfig[key]) {
                                                    $("[name='dbConfig_compare." + key + "']:visible").attr("readonly", "readonly").val(dbConfig[key]);
                                                }
                                                else {
                                                    $("[name='dbConfig_compare." + key + "']:visible").removeAttr("readonly").val("");
                                                }
                                            }
                                        });
                                    }
                                    connectorConfig["dbConfig_compare"]["syncDefaultDatabaseUrl"] = $.trim($("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").val());
                                    if (connectorConfig["dbConfig_compare"]["syncDefaultDatabaseUrl"] == "") {
                                        $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=db_compare_action_container] table td a").each(function () {
                                            $(this).closest("td").hide();
                                            if ("@DataSource.Heroku_Postgres" == connectorConfig["dbConfig_compare"]["dataSource"]) {
                                                $(this).closest("td").show();
                                            }

                                            if ($(this).attr("name") == "compare_db_edit" && $.trim($(this).closest(".row").find(".form-control").val()) == "") {
                                                $(this).closest("td").hide();
                                            }
                                        });
                                        $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=db_compare_action_container]").show();
                                    }
                                    $("a[name=compare_db_save]").trigger("click");
                                }).fail(function () {
                                    $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").val("");
                                    //setDefaultElmValues();
                                });
                            }
                            //else {
                            //     $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=db_compare_action_container]").hide();
                            //}
                        }
                        break;
                    default:
                        //setDefaultElmValues();
                        break;
                }
            });

            //19-11-2018
            $("div[data-dbconfig_compare] select[name='dbConfig_compare.db_schema']").on("change", function () {
                //if(connectorConfig.isNew)
                //{
                //    connectorConfig["syncDestination"] = "";
                //    connectorConfig["destDBSchema"] = "";
                //}
                if (connectorConfig.isNew) {
                    isCompareEnabled = true;
                    $("#divCompareFieldContainer").hide();
                    $("#dbConfig_compare_object_name")[0].selectedIndex = 0;
                    $("[name=customScheduleInMinutes]").val('');
                }
                $("[name=selectAll]").prop("checked", false);
                connectorConfig['dbConfig_compare']['db_schema'] = $(this).val();
                if (connectorConfig['dbConfig_compare']['db_schema'] != "") {
                    if (connectorConfig.dbConfig_compare.table_type != '@SelectedTableType.Create_New_Table') {
                          loadSourceObjects(connectorConfig,"dbConfig_compare_object_name",2);
                    }
                }
                else{
                    $("select[id=dbConfig_compareObjectName]").empty().append($('<option></option>').val('').text('Please select a data source object'));
                }
            });

            if (connectorConfig.syncDestination && connectorConfig.syncDestination != "" && !connectorConfig.isNew) {
                $('[name="syncDestination"]').trigger("change");
            }

            if (connectorConfig.dataSource && connectorConfig.dataSource != "") {
                $('[name="dataSource"]').trigger("change");
            }

            if (connectorConfig.scheduleType == "@ScheduleType.CUSTOM.ToString()") {
                $("input[type=radio][name=scheduleType]").trigger("change");
            }

            if (connectorConfig.dbConfig_compare.table_type == "@SelectedTableType.Create_New_Table") {
               $("div[data-table-compare=CompareObjectname]").hide();
               $("div[id=divCompareFieldContainer]").hide();
               $("div[data-new-table-compare=CompareNewObjectname]").show();
            }
        });

        function setDefaultElmValues(){
            connectorConfig["dbConfig"] = {};
            $("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val("");
            $("div[data-dataSource]").find("select[id=dbSchema]").empty().append($('<option></option>').val('').text('Please select a data source schema'));
            $("select[id=sourceObjectName]").empty().append($('<option></option>').val('').text('Please select a data source object'));
            $("#divCheckBoxList").empty();
            $("#divFieldContainer").hide();
            $("#dbconfig_compare").hide();
           // $("div[data-syncDestination]").find("select[id=destDBSchema]").empty().append($('<option></option>').val('').text('Please select a database schema'));
           // destinationChanged();
        }

        function saveConnector(conConfig) {
            var funName=arguments.callee.name;
            busyLoaderStatus.push(funName);
            showMask(true);
            $.post(controllerPath + 'addedit/', conConfig, function (response) {
                //console.log(response.status);
                if (response.status||response.Status) {
                    if (response.status == 200 || response.Status==200) {
                        $("#lblMessage").html('DeDup Process has been saved successfully').css({ color: 'green' });
                        showMask(true);
                        location.href = "/";
                        return false;
                    }
                    else if (response.status == 401||response.Status==401)
                        $("#lblMessage").html("Input is not valid").css({ color: 'red' });
                    else
                        $("#lblMessage").html("DeDup Process has not been saved").css({ color: 'red' });
                }
            }, 'json').fail(function (jqXHR, textStatus, errorThrown) {
                console.log("error " + textStatus);
                console.log("incoming Text " + jqXHR.responseText);
                if ((jqXHR.status == 500 || jqXHR.status == 401)) {
                    if (jqXHR.responseJSON && jqXHR.responseJSON.message) {
                        Swal.fire('', jqXHR.responseJSON.message, 'error');
                    }
                    else {
                        Swal.fire('', "Not able to save DeDup Process, Please try again.", 'error');
                    }
                }
                else if (jqXHR.status == 300) {
                    Swal.fire('', "The " + conConfig.destObjectName + " table already exists, Please try with some other name.", 'error');
                }
            }).always(function () {
                busyLoaderStatus.remove(funName);
                if(busyLoaderStatus.length==0)
                {
                    hideMask();
                }
            });
        }

        function enableDisableCompareTable(conConfig) {
            if (conConfig.isNew) {
                $("#divCompareFieldContainer").hide();
                $("#dbconfig_compare").attr("style", "pointer-events:none");
                $("#dbConfig_compare_dataSource")[0].selectedIndex = 0;
                $("#dbConfig_compare_object_name")[0].selectedIndex = 0;
                $("#dbConfig_compare_db_schema")[0].selectedIndex = 0;
                $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").val("");
            }
        }

        function loadSourceNameSpaces(conConfig) {
            var funName=arguments.callee.name;
            busyLoaderStatus.push(funName);
            showMask(true);
            $.post(controllerPath + 'getdatasourceobjects/', { dataSource: conConfig.dataSource, dbConfig: conConfig.dbConfig }, function (response) {
                var selectedVal = '',ddlNameSpace, sourceNameSpaces = [];
                dataSourceTables = response;
                if (dataSourceTables && dataSourceTables.length > 0) {
                    if (conConfig.dataSource == "@DataSource.Heroku_Postgres"
                        || conConfig.dataSource == "@DataSource.Azure_Postgres"
                        || conConfig.dataSource == "@DataSource.AWS_Postgres"
                        || conConfig.dataSource == "@DataSource.Azure_SQL") {
                        $.DEDUPProcess.sortByProperty(dataSourceTables, "dbSchema", false, true);
                        ddlNameSpace = $("div[data-dataSource]").find("select[id=dbSchema]");
                        ddlNameSpace.empty().append($('<option></option>').val('').text('Please select a data source schema'));
                        $.each(dataSourceTables, function (index, item) {
                            if (sourceNameSpaces.indexOf(item.dbSchema) == -1) {
                                sourceNameSpaces.push(item.dbSchema);
                                ddlNameSpace.append($('<option></option>').val(item.dbSchema).text(item.dbSchema));
                            }

                            //console.log(item.dbSchema);
                            if(conConfig.dbSchema=="" && item.tableName==conConfig.sourceObjectName){
                                conConfig.dbSchema=item.dbSchema;
                            }
                        });

                        selectedVal = conConfig.dbSchema || "";
                    }
                }
                sourceNameSpaces = [];
                var matchingValue = getDropdownValue(ddlNameSpace, selectedVal);
                if (ddlNameSpace && matchingValue.length > 0) {
                    ddlNameSpace.val(matchingValue);
                }
                else if (ddlNameSpace && (conConfig.dataSource == "@DataSource.Heroku_Postgres"
                    || conConfig.dataSource == "@DataSource.Azure_Postgres"
                    || conConfig.dataSource == "@DataSource.AWS_Postgres"
                    || conConfig.dataSource == "@DataSource.Azure_SQL")) {
                    if (conConfig.isNew == false) {
                        Swal.fire('', ("The source <b>" + conConfig.dbSchema + "</b> schema not found!"), 'error');
                    }
                    var defSchema=(conConfig.dataSource == "@ConnectorType.Azure_SQL"?$("[name=gbl_sqldbschema]").val(): $("[name=gbl_dbschema]").val());
                    ddlNameSpace.find("option:contains('" + defSchema + "')").each(function () {
                        if ($(this).html() == defSchema) {
                            conConfig.dbSchema = $(this).val();
                            $(this).attr('selected', 'selected');
                            return false;
                        }
                    });
                }
                loadSourceObjects(conConfig,"sourceObjectName",1);
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
                console.log("error " + textStatus);
                console.log("incoming Text " + jqXHR.responseText);
                if ((jqXHR.status == 500 || jqXHR.status == 401)) {
                    if (conConfig.dataSource == "@DataSource.Heroku_Postgres"
                        || conConfig.dataSource == "@DataSource.Azure_Postgres"
                        || conConfig.dataSource == "@DataSource.AWS_Postgres"
                        || conConfig.dataSource == "@DataSource.Azure_SQL") {
                        Swal.fire('', "Not able to load data source schemas due to some error.", 'error');
                    }
                }
            })
            .always(function () {
                busyLoaderStatus.remove(funName);
                if(busyLoaderStatus.length==0)
                {
                    hideMask();
                }
            });
        }

        function loadSourceObjects(conConfig, tableName, schematype) {
            $("#divCompareFieldContainer").hide();
            if (conConfig.isNew) {
                 document.getElementById("dbConfig_compare_object_name").selectedIndex = 0;
            }

            var selectedVal = '',funName,ddlSourceObject;
            funName=arguments.callee.name;
            busyLoaderStatus.push(funName);
            ddlSourceObject = $("select[id="+tableName+"]");
            ddlSourceObject.empty().append($('<option></option>').val('').text('Please select a data source object'));
            showMask();

            if (ddlSourceObject && dataSourceTables && dataSourceTables.length > 0) {
                if (conConfig.dataSource == "@DataSource.Heroku_Postgres"
                    || conConfig.dataSource == "@DataSource.Azure_Postgres"
                    || conConfig.dataSource == "@DataSource.AWS_Postgres"
                    || conConfig.dataSource == "@DataSource.Azure_SQL") {
                    $.DEDUPProcess.sortByProperty(dataSourceTables, "tableName", false, true);
                    $.each(dataSourceTables, function (index, item) {
                        if (item.dbSchema == conConfig.dbSchema && item.tableName!="" &&schematype==1) {
                            ddlSourceObject.append($('<option></option>').val(item.tableName).text(item.tableName));
                        }
                        else if (item.dbSchema == conConfig.dbConfig_compare.db_schema && item.tableName!="" &&schematype==2 && item.tableName!=conConfig.sourceObjectName) {
                            ddlSourceObject.append($('<option></option>').val(item.tableName).text(item.tableName));
                        }
                    });

                    if(schematype==1)
                    {
                        selectedVal = conConfig.sourceObjectName || "";
                    }
                    else if(schematype==2)
                    {
                        isCompareEnabled = true;
                        selectedVal = conConfig.dbConfig_compare.object_name || "";
                    }
                }

                var matchingValue = getDropdownValue(ddlSourceObject,selectedVal);
                if (matchingValue.length > 0) {
                    ddlSourceObject.val(matchingValue);
                    ddlSourceObject.find("option:selected").attr("data-destObjName", $("[name=destObjName]").val());

                    if(schematype==1)
                    {
                        conConfig.sourceObjectName = selectedVal;
                        loadSourceObjectColumns(conConfig);
                    }
                    else if(schematype==2)
                    {
                        isCompareEnabled = true;
                        conConfig.dbConfig_compare.object_name = selectedVal;
                        loadCompareSourceObjectColumns(conConfig);
                    }
                }
                else {
                    if (connectorConfig.isNew == false) {
                        Swal.fire('', ("Data Source <b>" + conConfig.sourceObjectName + "</b> object not found!"), 'error');
                       // showAlert(("Data Source <b>"+conConfig.sourceObjectName+"</b> object not found!"),"Error");
                    }
                    //$("[name='syncDestination']").val('')
                }

                //destinationChanged();
               // loadDestinationByMainSource();
            }

            busyLoaderStatus.remove(funName);
            if(busyLoaderStatus.length==0)
            {
                hideMask();
            }
        }

        function loadDestinationByMainSource() {
            $("select[name='syncDestination'").val(connectorConfig.dataSource);
            if ($("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val() != "") {
                $("textarea[name='destDBConfig.syncDefaultDatabaseUrl'").val($("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val());
            }
            else {
                $("select[name='syncDestination'").val("");
                connectorConfig["destDBConfig"]["syncDefaultDatabaseUrl"] = "";
                $("textarea[name='destDBConfig.syncDefaultDatabaseUrl'").val('');
                $("div[data-syncDestination]").hide();
            }
            connectorConfig["destDBConfig"]["databaseType"] = connectorConfig.dataSource;
            connectorConfig["destDBConfig"]["syncDefaultDatabaseUrl"] = $("textarea[name='destDBConfig.syncDefaultDatabaseUrl'").val();
            $("select[name='syncDestination']").trigger("change");
        }

        function loadSourceObjectColumns(conConfig) {
            var funName=arguments.callee.name;
            busyLoaderStatus.push(funName);
            if (conConfig == null) {
                Swal.fire('', "Not able to load data source columns due to some error.", 'error');
               // showAlert('Not able to load data source columns due to some error.', "Error");
                busyLoaderStatus.remove(funName);
                if(busyLoaderStatus.length==0)
                {
                    hideMask();
                }
                return;
            }

            var divCheckBoxList = $("#divCheckBoxList"), srcNewRecordFilter = $("#srcNewRecordFilter"), srcUpdateRecordFilter = $("#srcUpdateRecordFilter");
            divCheckBoxList.empty();
            $(srcNewRecordFilter).find('option:not(:first)').remove();
            $(srcUpdateRecordFilter).find('option:not(:first)').remove();
            $("#lblMessage").html('');
            showMask();
            conConfig.dbConfig.serialNo="1";
            $.post(controllerPath + 'getdatasourceobjectcolumns/', { dataSource: conConfig.dataSource, sourceValue: conConfig.sourceObjectName, dbSchema: conConfig.dbSchema, dbConfig: conConfig.dbConfig}, function (response) {
                if (response && response.length > 0) {
                    //$.DEDUPProcess.sortByProperty(response, 'name', false);
                    $.each(response, function (index, item) {
                        var divNewTag = "", isChecked;
                        if (conConfig.dataFields && conConfig.dataFields.split(',').indexOf(item.name) != -1) {
                            isChecked = "true";
                        }
                        //if (!conConfig.isNew) {
                        //    divNewTag = " <label class='kt-checkbox col-lg-5  kt-checkbox--disabled' style='color: #333 !important;margin-right: 0px'><input type='checkbox'  name='sourceObjectFields' value=\"" + item.name + "\" data-fieldType=\"" + item.fieldType + "\" data-isPrimaryKey=\"" + item.isPrimaryKey + "\" data-isRequired=\"" + item.isRequired + "\" data-defaultValue=\"" + item.defaultValue + "\"";
                        //}else

                        {
                            if ($("input[name=methodType]:checked").val().toLowerCase() == "fuzzy_compare" && item.fieldType != "text") {
                                divNewTag = "<label class='kt-checkbox col-lg-6' style='color:gainsboro;margin-right: 0px'><input type='hidden' name='sourceObjectFields' value=\"" + item.name + "\" data-fieldType=\"" + item.fieldType + "\" data-isPrimaryKey=\"" + item.isPrimaryKey + "\" data-isRequired=\"" + item.isRequired + "\" data-defaultValue=\"" + item.defaultValue + "\"";
                            }

                            else {

                                divNewTag = "<label class='kt-checkbox col-lg-6' style='color: #333 !important;margin-right: 0px'><input type='checkbox' name='sourceObjectFields' value=\"" + item.name + "\" data-fieldType=\"" + item.fieldType + "\" data-isPrimaryKey=\"" + item.isPrimaryKey + "\" data-isRequired=\"" + item.isRequired + "\" data-defaultValue=\"" + item.defaultValue + "\"";

                            }

                        }
                        if (item.maxLengthSpecified)
                            divNewTag += " data-maxLength='" + item.maxLength + "'";
                        else
                            divNewTag += " data-maxLength='0'";
                        if(item.scaleSpecified)
                            divNewTag += " data-precision='"+ item.scale +"'";
                        else
                            divNewTag += " data-precision='0'";

                        if (isChecked)
                            divNewTag += " checked='" + isChecked + "'";
                        //else if (conConfig.id > 0)
                        //    divNewTag += " disabled='disabled'";

                        divNewTag += " data-val=\"true\"  data-val-required=\"Please select source table column(s)\"/><span></span> " + item.name + "</label>";
                        divCheckBoxList.append(divNewTag);
                         if (item.fieldType == 'Date' || item.fieldType.indexOf("timestamp") != -1) {
                            if ("@Model.srcNewRecordFilter" == item.name) {
                                srcNewRecordFilter.append($('<option selected="selected"></option>').val(item.name).text(item.name));
                            }
                            else {
                                srcNewRecordFilter.append($('<option></option>').val(item.name).text(item.name));
                            }

                            if ("@Model.srcUpdateRecordFilter" == item.name) {
                                srcUpdateRecordFilter.append($('<option selected="selected"></option>').val(item.name).text(item.name));
                            }
                            else {
                                srcUpdateRecordFilter.append($('<option></option>').val(item.name).text(item.name));
                            }
                        }
                    });

                    if($("input[name=dedupSourceType]:checked").val()=="@SourceType.Remove_Duplicates_from_a_Single_Table" && $("input[name=dedupSourceType]:checked").val()!="")
                    {
                        $("#dbconfig_compare").hide();
                    }
                    else if($("input[name=dedupSourceType]:checked").val()!="@SourceType.Remove_Duplicates_from_a_Single_Table" && $("input[name=dedupSourceType]:checked").val()!=""){
                        $("#dbconfig_compare").show();
                        DisableCompareDetails();
                        $("#dbconfig_compare").removeAttr("style", "pointer-events:none");
                    }
                    attachSrcObjColEvent(divCheckBoxList);
                    $("#divCheckBoxList").show();
                    $("#divFieldContainer").show();
                    if($("input[name=dedupSourceType]:checked").val()=="@SourceType.Remove_Duplicates_from_a_Single_Table" && $("input[name=dedupSourceType]:checked").val()!="")
                    {
                        $("#dbconfig_compare").hide();
                        $("#divCheckBoxList").show();
                        $("#divFieldContainer").show();
                        $("#divCompareCheckBoxList").hide();
                        $("#divCompareFieldContainer").hide();
                        $("#tooltip_single").show();
                        $("#tooltip_multiple").hide();
                        disableSoruceDataColumn();
                    }
                    else if ($("input[name=dedupSourceType]:checked").val() != "@SourceType.Remove_Duplicates_from_a_Single_Table" && $("input[name=dedupSourceType]:checked").val() != "") {
                        if (connectorConfig.isNew) {
                            $("select[name='dbConfig_compare.dataSource'").val(connectorConfig.dataSource);
                            $("textarea[name='dbConfig_compare.syncDefaultDatabaseUrl'").val($("[name='dbConfig.syncDefaultDatabaseUrl']:visible").val());
                            setTitleByDBType("dbConfig_compare", connectorConfig.dataSource);
                        }
                        else {
                            setTitleByDBType("dbConfig_compare", connectorConfig.dbConfig_compare.dataSource);
                        }
                        $("#tooltip_single").hide();
                        $("#tooltip_multiple").show();
                        $("#dbconfig_compare").show();
                        $("#dbconfig_compare").removeAttr("pointer-events");
                        //$("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").closest(".row").find("div[name=db_compare_action_container]").hide();

                        $("a[name=compare_db_save]").trigger("click");
                        if(!connectorConfig.isNew){
                             $("[name='dbConfig_compare.syncDefaultDatabaseUrl']:visible").attr("readonly","readonly");
                        }
                        //$("#dbConfig_compare_dataSource").removeAttr("pointer-events");
                        //$("#dbConfig_compare_syncDefaultDatabaseUrl").removeAttr("pointer-events");
                        // $("#divCheckBoxList").hide();
                        // $("#divFieldContainer").hide();
                        $("#divCompareCheckBoxList").hide();
                        $("#divCompareFieldContainer").hide();
                    }
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.log("error " + textStatus);
                console.log("incoming Text " + jqXHR.responseText);
                if ((jqXHR.status == 500 || jqXHR.status == 401)) {
                   Swal.fire('', "Not able to load data source columns due to some error.", 'error');
                   // showAlert('Not able to load data source columns due to some error.', "Error");
                }
            }).always(function () {
                busyLoaderStatus.remove(funName);
                if(busyLoaderStatus.length==0)
                {
                    hideMask();
                }
            });
        }

        function attachSrcObjColEvent(chkBoxLst) {
            isCompareEnabled = true;
            $(chkBoxLst).find("input[name=sourceObjectFields]").on("click",function(e){
                var count=0,datetype,columnName;
                var source1ColName=$(this).val();
               // var attachedColumn=$(this).attr('data-source1-column');
                $("#lblMessage").html('');
                $('#divColumnSelect').find("div[class='modal-body']").html('');
                var compareCheckboxLenght= $("#divCompareCheckBoxList input[type=checkbox]").length;
                var SelectedTabletype=$("input[name=dedupSourceType]:checked").val();// $("input[type=radio][name=dedupTableType]:checked").val();
                var isNewTableChecked;
                if (SelectedTabletype == '@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination') {
                   isNewTableChecked=true;
                }
                else {
                     isNewTableChecked=false;
                }
                 if(isNewTableChecked)
                  {
                     compareCheckboxLenght=noOfColumn;
                  }

                if("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B"==$("input[name=dedupSourceType]:checked").val() && compareCheckboxLenght>0)
                {
                    if($(this).is(":checked"))
                    {
                        datetype = $(this).attr("data-fieldtype");
                        columnName=$(this).val();
                        if ($("#divCheckBoxList input:checked").length <= noOfColumn && datetype)
                        {

                        $("#divCompareCheckBoxList input[type=checkbox]:not(:checked)").each(function(element)
                        {
                            if($(this).val()==columnName &&$(this).attr("data-fieldtype")==datetype)
                            {
                                $(this).attr("data-source1-column",columnName);
                                $(this).prop("checked",true);
                            }
                        });

                        }
                        var selectedFields = $('[name=sourceObjectFields]:checked');
                        if (selectedFields.length > 0) {
                            $(this).closest('.form-group').removeClass('has-error');
                            $("span[data-valmsg-for=sourceObjectFields]").removeClass('help-block').html('');
                        }
                    }
                    else{
                        if(source1ColName)
                        {
                            $("#divCompareCheckBoxList input[value='"+source1ColName+"']").prop("checked",false);
                           // $("#divFieldContainer input[data-source1-column='"+source1ColName+"']").prop("checked",false).removeAttr("data-source1-column");
                        }
                        //else
                        //{
                        //    $("#divCompareFieldContainer input[data-source1-column='"+source1ColName+"']").prop("checked",false).removeAttr("data-source1-column");
                        //}
                    }
                }
                else
                {
                    if(!$(this).is(":checked"))
                    {
                        if(source1ColName)
                        {
                            $("#divCompareCheckBoxList input[value='"+source1ColName+"']").prop("checked",false);
                           // $("#divFieldContainer input[data-source1-column='"+attachedColumn+"']").prop("checked",false).removeAttr("data-source1-column");
                        }
                        //else
                        //{
                        //    $("#divCompareFieldContainer input[data-source1-column='"+source1ColName+"']").prop("checked",false).removeAttr("data-source1-column");
                        //}
                    }
                    if("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B"==$("input[name=dedupSourceType]:checked").val() && compareCheckboxLenght==0)
                    {
                        Swal.fire('', "You have selected multiple tables process type.So you can select check box once the other source column displayed.", 'error');
                        $("#divCheckBoxList input[value='"+source1ColName+"']").prop("checked",false);
                        return;
                    }
                }
                disableSoruceDataColumn();
                disableCompareSoruceDataColumn();
            });
            if ($("#divCheckBoxList input:checked").length == noOfColumn) {
                alert();
                disableSoruceDataColumn();
                disableCompareSoruceDataColumn();
            }
        }

        function loadCompareSourceObjectColumns(conConfig) {
            isCompareEnabled = true;
            var funName=arguments.callee.name;
            busyLoaderStatus.push(funName);
            if (conConfig == null) {
                Swal.fire('', "Not able to load data source columns due to some error.", 'error');
                busyLoaderStatus.remove(funName);
                if(busyLoaderStatus.length==0)
                {
                    hideMask();
                }
                return;
            }
            if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" != $("input[name=dedupSourceType]:checked").val() ||
                "@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination" != $("input[name=dedupSourceType]:checked").val()) {
                $("#divCheckBoxList input:not(:checked)").prop("disabled", false);
                $("#divCheckBoxList input:not(:checked)").closest("label").removeClass("kt-checkbox--disabled");
            }
            else {
                if (conConfig.isNew)
                {
                    $("#divCheckBoxList input[type=checkbox]").removeAttr("data-matching-column");
                    $("#divCheckBoxList input[type=checkbox]").prop("checked", false);
                    $("#divCheckBoxList input[type=checkbox]").prop("disabled", false);
                    $("#divCheckBoxList input[type=checkbox]").closest("label").removeClass("kt-checkbox--disabled");
                }
            }
            var divCheckBoxList = $("#divCompareCheckBoxList"), srcNewRecordFilter = $("#srcNewRecordFilter"), srcUpdateRecordFilter = $("#srcUpdateRecordFilter");
            divCheckBoxList.empty();
            $("#lblMessage").html('');
            showMask();
            $("#divCompareCheckBoxList").show();
             conConfig.dbConfig_compare.serialNo = "2";
             var atleastOneMatching = false;
            $.post(controllerPath + 'getdatasourceobjectcolumns/', { dataSource:conConfig.dbConfig_compare.dataSource, sourceValue: conConfig.dbConfig_compare.object_name, dbSchema: conConfig.dbConfig_compare.db_schema, dbConfig: conConfig.dbConfig_compare}, function (response) {
                if (response && response.length > 0) {

                    $.DEDUPProcess.sortByProperty(response, 'name', false);
                    $.each(response, function (index, item) {
                         var matchColumn = false;
                        if ($("#divCheckBoxList input[type=checkbox][value='" + item.name + "'][data-fieldtype='" + item.fieldType + "']").length > 0) {
                            matchColumn = true;
                            atleastOneMatching = true;
                            $("#divCheckBoxList input[type=checkbox][value='" + item.name + "'][data-fieldtype='" + item.fieldType + "']").attr("data-matching-column", true);
                        }
                        else {
                            console.log(item.name);
                        }
                        //$("#divCheckBoxList input[type=checkbox]").each(function () {
                        // if ($(this).val().toLowerCase() ==item.name.toLowerCase() && $(this).attr("data-fieldtype")==item.fieldType) {
                        //     $(this).attr("data-matching-column",true);
                        //     matchColumn = true;
                        //}
                        //});

                        var divNewTag = "", isChecked;
                        if (conConfig.compareSrcObjectFields && conConfig.compareSrcObjectFields.split(',').indexOf(item.name) != -1) {
                            isChecked = "true";
                        }
                        //if (!conConfig.isNew) {
                        //    divNewTag = " <label class='kt-checkbox col-lg-5  kt-checkbox--disabled' style='color: #333 !important;margin-right: 0px'><input type='checkbox' name='compareObjectFieldsMapping' value=\"" + item.name + "\" data-fieldType=\"" + item.fieldType + "\" data-isPrimaryKey=\"" + item.isPrimaryKey + "\" data-isRequired=\"" + item.isRequired + "\" data-defaultValue=\"" + item.defaultValue + "\"";
                        //}
                        //else
                        {
                            if ($("input[name=methodType]:checked").val().toLowerCase() == "fuzzy_compare" && item.fieldType != "text") {
                                if (matchColumn) {
                                    divNewTag = " <label class='kt-checkbox col-lg-5' style='color:gainsboro;margin-right: 0px'><input type='hidden' name='compareObjectFieldsMapping' value=\"" + item.name + "\" data-fieldType=\"" + item.fieldType + "\" data-isPrimaryKey=\"" + item.isPrimaryKey + "\" data-isRequired=\"" + item.isRequired + "\" data-defaultValue=\"" + item.defaultValue + "\"";
                                }
                                else {
                                    divNewTag = " <label class='kt-checkbox col-lg-5  kt-checkbox--disabled' style='color:gainsboro;margin-right: 0px'><input type='hidden' name='compareObjectFieldsMapping' value=\"" + item.name + "\" data-fieldType=\"" + item.fieldType + "\" data-isPrimaryKey=\"" + item.isPrimaryKey + "\" data-isRequired=\"" + item.isRequired + "\" data-defaultValue=\"" + item.defaultValue + "\"";
                                }
                            }
                            else {

                                if (matchColumn) {
                                    divNewTag = " <label class='kt-checkbox col-lg-5' style='color:#333 !important;margin-right: 0px'><input type='checkbox' name='compareObjectFieldsMapping' value=\"" + item.name + "\" data-fieldType=\"" + item.fieldType + "\" data-isPrimaryKey=\"" + item.isPrimaryKey + "\" data-isRequired=\"" + item.isRequired + "\" data-defaultValue=\"" + item.defaultValue + "\"";
                                }
                                else {
                                    divNewTag = " <label class='kt-checkbox col-lg-5  kt-checkbox--disabled' style='color:#333 !important;margin-right: 0px'><input type='checkbox' name='compareObjectFieldsMapping' value=\"" + item.name + "\" data-fieldType=\"" + item.fieldType + "\" data-isPrimaryKey=\"" + item.isPrimaryKey + "\" data-isRequired=\"" + item.isRequired + "\" data-defaultValue=\"" + item.defaultValue + "\"";
                                }
                            }
                        }
                          if (item.maxLengthSpecified)
                            divNewTag += " data-maxLength='" + item.maxLength + "'";
                        else
                            divNewTag += " data-maxLength='0'";
                        if (matchColumn) {
                            divNewTag += " data-matching-column='true'";
                        }
                        else {
                              divNewTag += " disabled";
                        }
                        if(item.scaleSpecified)
                            divNewTag += " data-precision='"+ item.scale +"'";
                        else
                            divNewTag += " data-precision='0'";
                        if (isChecked) {
                            divNewTag += " checked='" + isChecked + "'";
                            if (!conConfig.isNew) {
                               divNewTag += " data-source1-column='" + item.name + "'";
                            }
                        }
                        //else if (conConfig.id > 0)
                        //    divNewTag += " disabled='disabled'";

                        divNewTag += " data-val=\"true\"  data-val-required=\"Please select compare source table column(s)\"/><span></span> " + item.name + "</label>";
                        divCheckBoxList.append(divNewTag);

                    });

                    $("#divCompareFieldContainer").show();
                    if (atleastOneMatching) {
                        attachCompareSrcObjColEvent(divCheckBoxList);

                        if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" == $("input[name=dedupSourceType]:checked").val()) {
                            if (!connectorConfig.isNew) {
                                disableSoruceDataColumn();
                                disableCompareSoruceDataColumn();
                            }
                            $("#divCheckBoxList input:not([data-matching-column]").prop("disabled", true);
                            $("#divCheckBoxList input:not([data-matching-column])").closest("label").addClass("kt-checkbox--disabled");
                        }
                    }
                    else {
                         Swal.fire('', "Column does not match from the selected tables.Please select some other table for select column to dedup", 'error');
                    }
                }

            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.log("error " + textStatus);
                console.log("incoming Text " + jqXHR.responseText);
                if ((jqXHR.status == 500 || jqXHR.status == 401)) {
                    Swal.fire('', "Not able to load data source columns because column does not match from the selected tables.", 'error');
                   // showAlert('Not able to load data source columns because column does not match from the selected tables.', "Error");
                }
            }).always(function () {
                busyLoaderStatus.remove(funName);
                if(busyLoaderStatus.length==0)
                {
                    hideMask();
                }
            });
        }

        function attachCompareSrcObjColEvent(chkBoxLst){
            $(chkBoxLst).find("input[name=compareObjectFieldsMapping]").on("click",function(e){
                var count=0,datetype,columnName;
                var source1ColName=$(this).val();
                var attachedColumn=$(this).attr('data-source1-column');
                $("#lblMessage").html('');
                $('#divColumnSelect').find("div[class='modal-body']").html('');
                var compareCheckboxLenght= $("#divCompareCheckBoxList input[type=checkbox]").length;

                if("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B"==$("input[name=dedupSourceType]:checked").val() && compareCheckboxLenght>0)
                {
                    if($(this).is(":checked"))
                    {
                        datetype = $(this).attr("data-fieldtype");
                        columnName = $(this).val();
                         $(this).attr("data-source1-column",columnName);
                        if ($("#divCompareCheckBoxList input:checked").length <= noOfColumn && datetype)
                        {
                          $("#divCheckBoxList input[type=checkbox]:not(:checked)").each(function(element)
                        {
                            if($(this).val()==columnName &&$(this).attr("data-fieldtype")==datetype)
                            {
                                $(this).prop("checked",true);
                            }
                        });
                        }
                        var selectedFields = $('[name=compareObjectFieldsMapping]:checked');
                        if (selectedFields.length > 0) {
                            $(this).closest('.form-group').removeClass('has-error');
                            $("span[data-valmsg-for=compareObjectFieldsMapping]").removeClass('help-block').html('');
                        }
                    }
                    else{
                        if(source1ColName)
                        {
                            $("#divCheckBoxList input[value='"+source1ColName+"']").prop("checked",false);
                           // $("#divCompareFieldContainer input[data-source1-column='"+attachedColumn+"']").prop("checked",false).removeAttr("data-source1-column");
                        }
                        //else
                        //{
                        //    $("#divFieldContainer input[data-source1-column='"+source1ColName+"']").prop("checked",false).removeAttr("data-source1-column");
                        //}
                    }
                }
                else
                {
                    if(!$(this).is(":checked"))
                    {
                        if(source1ColName)
                        {
                            $("#divCheckBoxList input[value='"+source1ColName+"']").prop("checked",false);
                         //   $("#divCompareFieldContainer input[data-source1-column='"+attachedColumn+"']").prop("checked",false).removeAttr("data-source1-column");
                        }
                        //else
                        //{
                        //    $("#divFieldContainer input[data-source1-column='"+source1ColName+"']").prop("checked",false).removeAttr("data-source1-column");
                        //}
                        //alert("first source");
                    }
                    if("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B"==$("input[name=dedupSourceType]:checked").val() && compareCheckboxLenght==0)
                    {
                        Swal.fire('', "You have selected multiple tables process type.So you can select check box once the other source column displayed.", 'error');
                       // showAlert('You have selected multiple tables process type.So you can select check box once the other source column displayed.', "Error");
                        $("#divCompareCheckBoxList input[value='"+source1ColName+"']").prop("checked",false);
                        return;
                    }
                }
                disableSoruceDataColumn();
                disableCompareSoruceDataColumn();
            });
        }

        function DisableCompareDetails() {
            $("#div-sourcetableFirst").hide();
           $("#div_opacity").removeAttr("style", "opacity:0");
        }

        function EnableCompareDetails() {
            $("#div-sourcetableFirst").show();
            $("#div_opacity").css("opacity", "0");
        }

        function disableSoruceDataColumn()
        {
            var SelectedTabletype = $("input[name=dedupSourceType]:checked").val();// $("input[type=radio][name=dedupTableType]:checked").val();
            var isNewTableChecked;
            if (SelectedTabletype == '@SourceType.Copy_Source_data_to_Destination_and_Remove_Duplicates_from_Destination') {
                isNewTableChecked=true;
            }
            else {
                    isNewTableChecked=false;
            }
            if ($("#divCheckBoxList input:checked").length == noOfColumn)
            {
                $("#divCheckBoxList input:not(:checked)").prop("disabled", true);
                $("#divCheckBoxList input:not(:checked)").closest("label").addClass("kt-checkbox--disabled");
                $("#divCheckBoxList input[type=checkbox]:checked").prop("disabled", false);
                $("#divCheckBoxList input[type=checkbox]:checked").closest("label").removeClass("kt-checkbox--disabled");
            }
            else {
                if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" != $("input[name=dedupSourceType]:checked").val() || isNewTableChecked) {
                    $("#divCheckBoxList input:not(:checked)").prop("disabled", false);
                    $("#divCheckBoxList input:not(:checked)").closest("label").removeClass("kt-checkbox--disabled");
                }
                else {
                    $("#divCheckBoxList input[data-matching-column]").prop("disabled", false);
                    $("#divCheckBoxList input[data-matching-column]").closest("label").removeClass("kt-checkbox--disabled");
                }
            }

            if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" == $("input[name=dedupSourceType]:checked").val())
            {
                if(!isNewTableChecked)
                {
                    $("#divCheckBoxList input:not([data-matching-column]").prop("disabled", true);
                    $("#divCheckBoxList input:not([data-matching-column])").closest("label").addClass("kt-checkbox--disabled");
                    $("#divCheckBoxList input[type=checkbox]:checked").prop("disabled", false);
                    $("#divCheckBoxList input[type=checkbox]:checked").closest("label").removeClass("kt-checkbox--disabled");
                }
            }
        }

        function disableCompareSoruceDataColumn()
        {
            if ($("#divCompareCheckBoxList input:checked").length == noOfColumn) {
                $("#divCompareCheckBoxList input:not(:checked)").prop("disabled", true);
                $("#divCompareCheckBoxList input:not(:checked)").closest("label").addClass("kt-checkbox--disabled");
                $("#divCompareCheckBoxList input[type=checkbox]:checked").prop("disabled", false);
                $("#divCompareCheckBoxList input[type=checkbox]:checked").closest("label").removeClass("kt-checkbox--disabled");
            }
            else {
                if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" != $("input[name=dedupSourceType]:checked").val()) {
                    $("#divCompareCheckBoxList input:not(:checked)").prop("disabled", false);
                    $("#divCompareCheckBoxList input:not(:checked)").closest("label").removeClass("kt-checkbox--disabled");
                }
                else {
                    $("#divCompareCheckBoxList input[data-matching-column]").closest("label").removeClass("kt-checkbox--disabled");
                    $("#divCompareCheckBoxList input[data-matching-column]").prop("disabled", false);
                }
            }
            if ("@SourceType.Merge_Table_A_Data_to_Table_B_and_Remove_Duplicates_from_Table_B" == $("input[name=dedupSourceType]:checked").val()) {
               $("#divCompareCheckBoxList input:not([data-matching-column]").prop("disabled", true);
                $("#divCompareCheckBoxList input:not([data-matching-column])").closest("label").addClass("kt-checkbox--disabled");
                $("#divCompareCheckBoxList input[type=checkbox]:checked").prop("disabled", false);
                $("#divCompareCheckBoxList input[type=checkbox]:checked").closest("label").removeClass("kt-checkbox--disabled");
            }
        }

        function loadDestFolders(conConfig) {
            var funName=arguments.callee.name, ddlNameSpace;
            busyLoaderStatus.push(funName);
            if (conConfig == null) {
                busyLoaderStatus.remove(funName);
                Swal.fire('', "Not able to load de shared folders due to some error.", 'error');
               // showAlert('Not able to load de shared folders due to some error.', "Error");
                if(busyLoaderStatus.length==0)
                {
                    hideMask();
                }
                return;
            }

            $("#lblMessage").html('');
            if (conConfig.syncDestination == "@ConnectorType.Heroku_Postgres"
                    || conConfig.syncDestination == "@ConnectorType.Azure_Postgres"
                    || conConfig.syncDestination == "@ConnectorType.AWS_Postgres"
                    || conConfig.syncDestination == "@ConnectorType.Azure_SQL")
            {
                ddlNameSpace = $("div[data-syncDestination]").find("select[id=destDBSchema]");
                ddlNameSpace.empty().append($('<option></option>').val('').text('Please select a database schema'));
                if(conConfig.destDBConfig==null || (conConfig.destDBConfig && conConfig.destDBConfig.syncDefaultDatabaseUrl=="")){
                    busyLoaderStatus.remove(funName);
                    if(busyLoaderStatus.length==0)
                    {
                        hideMask();
                    }
                    return;
                }
            }
            showMask();

            $.post(controllerPath + 'getalldestnamespaces/', { syncDestination: conConfig.syncDestination, dbConfig: conConfig.destDBConfig }, function (response) {
                var selectedVal = '', destNameSpaces = [];
                if (conConfig.syncDestination == "@ConnectorType.Heroku_Postgres"
                    || conConfig.syncDestination == "@ConnectorType.Azure_Postgres"
                    || conConfig.syncDestination == "@ConnectorType.AWS_Postgres"
                    || conConfig.syncDestination == "@ConnectorType.Azure_SQL")
                {
                    if(response==null || response==undefined || (response && response.length==0))
                    {
                        response=[{dbSchema: (conConfig.syncDestination == "@ConnectorType.Azure_SQL"?"@Constants.POSTGRES_DEFAULT_SCHEMA":"@Constants.MSSQL_DEFAULT_SCHEMA"), tableName: "", customerKey: ""}];
                    }
                }

                if (response && response.length > 0) {
                    if (conConfig.syncDestination == "@ConnectorType.Heroku_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.Azure_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.AWS_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.Azure_SQL") {
                        $.DEDUPProcess.sortByProperty(response, "dbSchema", false, true);
                        $.each(response, function (index, item) {
                            if (destNameSpaces.indexOf(item.dbSchema) == -1) {
                                destNameSpaces.push(item.dbSchema);
                                ddlNameSpace.append($('<option></option>').val(item.dbSchema).text(item.dbSchema));
                            }
                        });
                        selectedVal = conConfig.destDBSchema || "";
                    }
                    destNameSpaces = [];

                    var matchingValue = getDropdownValue(ddlNameSpace,selectedVal);
                    if (ddlNameSpace && matchingValue.length > 0) {
                        ddlNameSpace.val(matchingValue);

                    }
                    else if (ddlNameSpace && (conConfig.syncDestination == "@ConnectorType.Heroku_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.Azure_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.AWS_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.Azure_SQL")) {
                        if (conConfig.isNew == false) {
                            Swal.fire('', "The destination <b>" + conConfig.dbSchema +"</b> schema not found!", 'error');
                          //  showAlert(("The destination <b>"+conConfig.dbSchema+"</b> schema not found!"),"Error");
                        }
                        var defSchema=(conConfig.syncDestination == "@ConnectorType.Azure_SQL"?$("[name=gbl_sqldbschema]").val(): $("[name=gbl_dbschema]").val());
                        ddlNameSpace.find("option:contains('" + defSchema + "')").each(function () {
                            if ($(this).html() == defSchema) {
                                $(this).attr('selected', 'selected');
                                return false;
                            }
                        });
                    }
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.log("error " + textStatus);
                console.log("incoming Text " + jqXHR.responseText);
                if ((jqXHR.status == 500 || jqXHR.status == 401)) {
                    if (conConfig.syncDestination == "@ConnectorType.Heroku_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.Azure_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.AWS_Postgres"
                        || conConfig.syncDestination == "@ConnectorType.Azure_SQL") {
                        Swal.fire('', "Not able to load database schemas due to some error.", 'error');
                       // showAlert('Not able to load database schemas due to some error.', "Error");
                    }
                }
            }).always(function () {
                busyLoaderStatus.remove(funName);
                if(busyLoaderStatus.length==0)
                {
                    hideMask();
                }
            });
        }

        function destinationChanged() {
            var isDatabase=false;
            if ($('[name="syncDestination"]').val() == "@ConnectorType.Heroku_Postgres"
                || $('[name="syncDestination"]').val() == "@ConnectorType.Azure_Postgres"
                || $('[name="syncDestination"]').val() == "@ConnectorType.AWS_Postgres"
                || $('[name="syncDestination"]').val() == "@ConnectorType.Azure_SQL") {
                isDatabase = true;
            }

            $("div[data-syncDestination]").hide();
            if (isDatabase){
                $("div[data-syncDestination='Database']").show();
            }
            else{
                $("div[data-syncDestination='" + $("[name='syncDestination']").val() + "']").show();
            }
            $("div[data-syncDestination]").each(function () {
                if ($(this).is(":visible")) {
                    $(this).find("input,textarea,select:visible").each(function () {
                        if (connectorConfig.isNew) {
                            $(this).prop("disabled", false).rules('add', {
                                required: true
                            });
                        }
                        //$(this).prop("disabled", false).rules('add', {
                        //    required: true
                        //});
                        //if ($(this).attr("name") == 'destObjectName') {
                        //    var destName = $("#destObjectName").val();
                        //    if (destName)
                        //        $(this).prop("readonly", true).val(destName);
                        //    else
                        //        $(this).prop("readonly", false).val('');
                        //}
                    });
                }
                else {
                    $(this).find("input,textarea,select:hidden").each(function () {
                        $(this).prop("disabled", true);
                    });
                }
            });
        }

        function dataSourceChanged() {
            var isDatabase=false;
            if($('[name="dataSource"]').val()=="@DataSource.Heroku_Postgres"
                || $('[name="dataSource"]').val()=="@DataSource.Azure_Postgres"
                || $('[name="dataSource"]').val()=="@DataSource.AWS_Postgres"
                || $('[name="dataSource"]').val()=="@DataSource.Azure_SQL")
                isDatabase=true;
           // $("div[data-dataSource]").hide();
            if (isDatabase){
                $("div[data-dataSource='Database']").show();
            }
            else{
                $("div[data-dataSource='" + $("[name='dataSource']").val() + "']").show();
            }
            $("#divCheckBoxList").empty();
            $("#divFieldContainer").hide();
            //$("#dbconfig_compare").hide();
            $("[name=selectAll]").prop("checked", false);
            if(connectorConfig.isNew){
                //$("[name=destObjectName]").val('');
                $("[name=customScheduleInMinutes]").val('');
            }

            $("div[data-dataSource]").each(function () {
                if ($(this).is(":visible")) {
                    $(this).find("input,textarea,select:visible").each(function () {
                        if(connectorConfig.isNew){
                            $(this).prop("disabled", false).rules('add', {
                                required: true
                            });
                        }
                    });
                }
                else {
                    $(this).find("input,textarea,select:hidden").each(function () {
                        $(this).prop("disabled", true);
                    });
                }
            });

            $("select[id=sourceObjectName]").empty().append($('<option></option>').val('').text('Please select a source object'));
            //$("select[name='syncDestination'] option").show();
            ////$("select[name='syncDestination'] option[value*='Postgres'],select[name='syncDestination'] option[value*='SQL']").hide();
            //$("div[data-syncDestination]").find("select[id=destDBSchema]").empty().append($('<option></option>').val('').text('Please select a destination schema'));
            //if (connectorConfig.isNew) {
            //    $("select[name='syncDestination']").prop('selectedIndex', 0);
            //}
        }

        function setTitleByDBType(elemPrefix,databaseType) {
            var elemName=elemPrefix+'.syncDefaultDatabaseUrl';
            if (databaseType == "") {
                $("label[for='"+elemName+"']:visible").html("Postgres Database URL&nbsp;&nbsp;<i class=\"fa fa-info-circle\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"postgres://{userId}:{password}@@{host}:{port}/{database}\" style=\"color: #ffa500;\"></i>");
                return;
            }
            else {
                if ("@ConnectorType.Azure_SQL" == databaseType) {
                    $("label[for='"+elemName+"']:visible").html("Sql Database Connection String&nbsp;&nbsp;<i class=\"fa fa-info-circle\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Server={server};Initial Catalog={database};User ID={userId};Password={password};Encrypt={True/False};TrustServerCertificate={True/False};\" style=\"color: #ffa500;\"></i>");
                }
                else {
                    $("label[for='"+elemName+"']:visible").html("Postgres Database URL&nbsp;&nbsp;<i class=\"fa fa-info-circle\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"postgres://{userId}:{password}@@{host}:{port}/{database}\" style=\"color: #ffa500;\"></i>");
                }

                $("form").validate().settings.messages[elemName]["required"]="Database " + (databaseType == "@DatabaseType.Azure_SQL" ? "Connection String" : "Url") + " Is Required";
                if(connectorConfig.isNew)
                {
                    $("textarea[name='"+elemName+"']:visible")
                            .removeAttr("readonly")
                            .attr({
                                "placeholder": "Please enter database " + (databaseType == "@DatabaseType.Azure_SQL" ? "connection string" : "url")
                            });
                }
                else{
                    $("textarea[name='"+elemName+"']:visible")
                            .attr({
                                "placeholder": "Please enter database " + (databaseType == "@DatabaseType.Azure_SQL" ? "connection string" : "url")
                            });
                }
            }
        }

        function getDBConfig(databaseType){
            var dfd = $.Deferred();
            if(databaseType){
                var funName=arguments.callee.name;
                busyLoaderStatus.push(funName);
                showMask();
                console.log(databaseType);
                $.post('/config/getdbconfig', { databaseType: databaseType }, function (response) {
                    dfd.resolve(response);
                }, 'json').fail(function (error, status) {
                    console.log(error);
                    dfd.reject(null);
                }).always(function () {
                    busyLoaderStatus.remove(funName);
                    if(busyLoaderStatus.length==0)
                    {
                        hideMask();
                    }
                });
            }
            else{
                dfd.reject(null);
            }
            return dfd.promise();
        }

        function getDropdownValue(ddLst,searchVal){
            if(typeof ddLst=="object" && $.trim(searchVal)!=""){
                var matchedValue = ddLst.find("option").filter(function () {
                    if (this.value != "") {
                        return new RegExp('^' + this.value + '$', 'ig').test(searchVal);
                    }
                    else{
                        return false;
                    }
                }).attr('value');
                return (matchedValue || "");
            }
            return "";
        }
    </script>
}
